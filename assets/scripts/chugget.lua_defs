---@meta

---
--- Bindings for chugget's c++ code, for use with lua.
---
-- version: 0.1
---@class chugget.engine

---
--- Subscribes a Lua listener to named C++ events.
---
---@param eventType 'player_jumped'|'player_died' # The C++ event name.
---@param listener CppEvent_PlayerJumped|CppEvent_PlayerDied # Lua callback. Signature depends on eventType.
---@return nil
function subscribeToCppEvent(...) end

---
--- Publishes a Lua table as a C++ event and records its occurrence.
---
---@param eventType string # The C++ event name.
---@param data table       # Payload fields as a Lua table.
---@return nil
function publishCppEvent(...) end

---
--- Subscribes a Lua listener to a Lua-defined event.
---
---@param eventType string # The Lua event name.
---@param listener LuaEventListener # Callback invoked when the event fires.
---@return nil
function subscribeToLuaEvent(...) end

---
--- Publishes a Lua-defined event with a data table.
---
---@param eventType string # The Lua event name.
---@param data table       # Payload table passed to listeners.
---@return nil
function publishLuaEvent(...) end

---
--- Publishes a Lua-defined event with no arguments.
---
---@param eventType string # The Lua event name.
---@return nil
function publishLuaEventNoArgs(...) end

---
--- Clears all listeners for the specified Lua-defined event.
---
---@param eventType string # The Lua event name.
---@return nil
function resetListenersForLuaEvent(...) end

---
--- Clears all listeners for the specified C++ event type.
---
---@param eventType string # The C++ event type name.
---@return nil
function resetListenersForCppEvent(...) end

---
--- Removes all registered event listeners (both C++ and Lua).
---
---@return nil
function clearAllListeners(...) end

---
--- Returns whether the given event has occurred and its data.
---
---@param eventType string # The event name.
---@return boolean occurred, table|nil payload # True if the event has fired, and its payload.
function getEventOccurred(...) end

---
--- Manually marks an event as occurred (or not).
---
---@param eventType string  # The event name.
---@param occurred boolean # Whether to mark it occurred or not.
---@return nil
function setEventOccurred(...) end

---
--- Enables or disables tutorial mode.
---
---@param active boolean # Whether to activate tutorial mode
---@return nil
function setTutorialModeActive(...) end

---
--- Resets the tutorial system to its initial state.
---
---@return nil
function resetTutorialSystem(...) end

---
--- Displays a tutorial window with the provided text.
---
---@param text string # Tutorial content text to display.
---@return nil
function showTutorialWindow(...) end

---
--- Displays a tutorial window with selectable options.
---
---@param text string # Tutorial content to display.
---@param options string[] # An array-style table of button labels.
---@return nil
function showTutorialWindowWithOptions(...) end

---
--- Begins the specified tutorial coroutine if it is defined.
---
---@param tutorialName string # The name of the tutorial coroutine to start.
---@return nil
function startTutorial(...) end

---
--- Locks player input controls.
---
---@return nil
function lockControls(...) end

---
--- Unlocks player input controls.
---
---@return nil
function unlockControls(...) end

---
--- Adds a new game announcement to the log.
---
---@param message string # The announcement message.
---@return nil
function addGameAnnouncement(...) end

---
--- Registers a tutorial to activate on a specific game event.
---
---@param eventType string # The event to listen for.
---@param tutorialName string # The name of the tutorial to trigger.
---@return nil
function registerTutorialToEvent(...) end

---
--- Moves the camera instantly to the specified position.
---
---@param x number # The target X position.
---@param y number # The target Y position.
---@return nil
function moveCameraTo(...) end

---
--- Moves the camera to center on the given entity.
---
---@param entity Entity # The entity to focus the camera on.
---@return nil
function moveCameraToEntity(...) end

---
--- Fades the screen to black over a specified duration.
---
---@param duration number # The duration of the fade in seconds.
---@return nil
function fadeOutScreen(...) end

---
--- Fades the screen in from black over a specified duration.
---
---@param duration number # The duration of the fade in seconds.
---@return nil
function fadeInScreen(...) end

---
--- Displays a visual indicator around the entity.
---
---@param entity Entity # The entity to display the indicator around.
---@return nil
function displayIndicatorAroundEntity(...) end

---
--- Displays a visual indicator of a specific type around the entity.
---
---@overload fun(entity: Entity, indicatorTypeID: string):nil
function displayIndicatorAroundEntity(...) end

---
--- Plays a sound effect from the specified category.
---
---@param category string # The category of the sound.
---@param soundName string # The name of the sound effect to play.
---@return nil
function playSoundEffect(...) end

---
--- Plays a music track.
---
---@param musicName string # The name of the music track to play.
---@param loop? boolean # If the music should loop. Defaults to false.
---@return nil
function playMusic(...) end

---
--- Adds a music track to the queue to be played next.
---
---@param musicName string # The name of the music track to queue.
---@param loop? boolean # If the queued music should loop. Defaults to false.
---@return nil
function queueMusic(...) end

---
--- Fades in and plays a music track over a duration.
---
---@param musicName string # The music track to fade in.
---@param duration number # The duration of the fade in seconds.
---@return nil
function fadeInMusic(...) end

---
--- Fades out the currently playing music.
---
---@param duration number # The duration of the fade in seconds.
---@return nil
function fadeOutMusic(...) end

---
--- Pauses the current music track.
---
---@param smooth? boolean # Whether to fade out when pausing. Defaults to false.
---@param fadeDuration? number # The fade duration if smooth is true. Defaults to 0.
---@return nil
function pauseMusic(...) end

---
--- Resumes the paused music track.
---
---@param smooth? boolean # Whether to fade in when resuming. Defaults to false.
---@param fadeDuration? number # The fade duration if smooth is true. Defaults to 0.
---@return nil
function resumeMusic(...) end

---
--- Sets the master audio volume.
---
---@param volume number # The master volume level (0.0 to 1.0).
---@return nil
function setVolume(...) end

---
--- Sets the volume for the music category only.
---
---@param volume number # The music volume level (0.0 to 1.0).
---@return nil
function setMusicVolume(...) end

---
--- Sets the volume for a specific sound effect category.
---
---@param category string # The name of the sound category.
---@param volume number # The volume for this category (0.0 to 1.0).
---@return nil
function setCategoryVolume(...) end

---
--- Sets the pitch for a specific sound. Note: This may not apply to currently playing instances.
---
---@param category string # The category of the sound.
---@param soundName string # The name of the sound effect.
---@param pitch number # The new pitch multiplier (1.0 is default).
---@return nil
function setSoundPitch(...) end

---
--- Requests a full reset of the AI system state.
---
---@return nil
function hardReset(...) end

---
--- Retrieves an entity by its string alias.
---
---@param alias string
---@return Entity|nil
function getEntityByAlias(...) end

---
--- Assigns a string alias to an entity.
---
---@param alias string
---@param entity Entity
---@return nil
function setEntityAlias(...) end

---
--- Logs a debug message associated with an entity.
---
---@param entity Entity # The entity to associate the log with.
---@param message string # The message to log.
---@return nil
function debug(...) end

---
--- Logs a general debug message.
---
---@overload fun(message: string):nil
function debug(...) end

---
--- Logs an error message associated with an entity.
---
---@param entity Entity # The entity to associate the error with.
---@param message string # The error message.
---@return nil
function error(...) end

---
--- Logs a general error message.
---
---@overload fun(message: string):nil
function error(...) end

---
--- Sets a value in the entity's current world state.
---
---@param entity Entity
---@param key string
---@param value boolean
---@return nil
function setCurrentWorldStateValue(...) end

---
--- Gets a value from the entity's current world state.
---
---@param entity Entity
---@param key string
---@return boolean|nil
function getCurrentWorldStateValue(...) end

---
--- Clears the entity's current world state.
---
---@param entity Entity
---@return nil
function clearCurrentWorldState(...) end

---
--- Sets a value in the entity's goal world state.
---
---@param entity Entity
---@param key string
---@param value boolean
---@return nil
function setGoalWorldStateValue(...) end

---
--- Gets a value from the entity's goal world state.
---
---@param entity Entity
---@param key string
---@return boolean|nil
function getGoalWorldStateValue(...) end

---
--- Clears the entity's goal world state.
---
---@param entity Entity
---@return nil
function clearGoalWorldState(...) end

---
--- Sets a float value on an entity's blackboard.
---
---@param entity Entity
---@param key string
---@param value number
---@return nil
function setBlackboardFloat(...) end

---
--- Gets a float value from an entity's blackboard.
---
---@param entity Entity
---@param key string
---@return number
function getBlackboardFloat(...) end

---
--- Sets a boolean value on an entity's blackboard.
---
---@param entity Entity
---@param key string
---@param value boolean
---@return nil
function setBlackboardBool(...) end

---
--- Gets a boolean value from an entity's blackboard.
---
---@param entity Entity
---@param key string
---@return boolean
function getBlackboardBool(...) end

---
--- Sets an integer value on an entity's blackboard.
---
---@param entity Entity
---@param key string
---@param value integer
---@return nil
function setBlackboardInt(...) end

---
--- Gets an integer value from an entity's blackboard.
---
---@param entity Entity
---@param key string
---@return integer
function getBlackboardInt(...) end

---
--- Sets a string value on an entity's blackboard.
---
---@param entity Entity
---@param key string
---@param value string
---@return nil
function setBlackboardString(...) end

---
--- Gets a string value from an entity's blackboard.
---
---@param entity Entity
---@param key string
---@return string
function getBlackboardString(...) end

---
--- Checks if a specific keyboard key is currently pressed.
---
---@param key string
---@return boolean
function isKeyPressed(...) end

---
--- Pauses the game.
---
---@return nil
function pauseGame(...) end

---
--- Unpauses the game.
---
---@return nil
function unpauseGame(...) end


---
--- Results of an action
---
---@class ActionResult
local ActionResult = {
    SUCCESS = 0,  -- When succeeded
    FAILURE = 1,  -- When failed
    RUNNING = 2  -- When still running
}


---
--- Wraps an EnTT entity handle for Lua scripts.
---
---@class Entity
local Entity = {
}


---
--- Container for all text‐system types
---
---@class TextSystem
local TextSystem = {
    effectFunctions = {}  -- Map of effect names to C++ functions
}


---
--- Holds parsed arguments for text effects
---
---@class TextSystem.ParsedEffectArguments
TextSystem.ParsedEffectArguments = {
}

---
--- Returns the list of raw effect arguments
---
---@return std::vector<std::string> arguments # The parsed effect arguments
function TextSystem.ParsedEffectArguments:arguments(...) end


---
--- Represents one rendered character in the text system
---
---@class TextSystem.Character
TextSystem.Character = {
}

---
--- Gets the character value
---
---@return any value # character value
function TextSystem.Character:value(...) end

---
--- Gets the override codepoint
---
---@return any overrideCodepoint # override codepoint
function TextSystem.Character:overrideCodepoint(...) end

---
--- Gets the rotation angle
---
---@return any rotation # rotation angle
function TextSystem.Character:rotation(...) end

---
--- Gets the scale factor
---
---@return any scale # scale factor
function TextSystem.Character:scale(...) end

---
--- Gets the glyph size
---
---@return any size # glyph size
function TextSystem.Character:size(...) end

---
--- Gets the shadow displacement
---
---@return any shadowDisplacement # shadow displacement
function TextSystem.Character:shadowDisplacement(...) end

---
--- Gets the shadow height
---
---@return any shadowHeight # shadow height
function TextSystem.Character:shadowHeight(...) end

---
--- Gets the X-axis scale modifier
---
---@return any scaleXModifier # X-axis scale modifier
function TextSystem.Character:scaleXModifier(...) end

---
--- Gets the Y-axis scale modifier
---
---@return any scaleYModifier # Y-axis scale modifier
function TextSystem.Character:scaleYModifier(...) end

---
--- Gets the tint color
---
---@return any color # tint color
function TextSystem.Character:color(...) end

---
--- Gets the per-glyph offsets
---
---@return any offsets # per-glyph offsets
function TextSystem.Character:offsets(...) end

---
--- Gets the per-glyph shadow offsets
---
---@return any shadowDisplacementOffsets # per-glyph shadow offsets
function TextSystem.Character:shadowDisplacementOffsets(...) end

---
--- Gets the per-glyph scale modifiers
---
---@return any scaleModifiers # per-glyph scale modifiers
function TextSystem.Character:scaleModifiers(...) end

---
--- Gets the user-defined data
---
---@return any customData # user-defined data
function TextSystem.Character:customData(...) end

---
--- Gets the global offset
---
---@return any offset # global offset
function TextSystem.Character:offset(...) end

---
--- Gets the applied effects list
---
---@return any effects # applied effects list
function TextSystem.Character:effects(...) end

---
--- Gets the parsed effect arguments
---
---@return any parsedEffectArguments # parsed effect arguments
function TextSystem.Character:parsedEffectArguments(...) end

---
--- Gets the character index
---
---@return any index # character index
function TextSystem.Character:index(...) end

---
--- Gets the line number
---
---@return any lineNumber # line number
function TextSystem.Character:lineNumber(...) end

---
--- Gets the first frame timestamp
---
---@return any firstFrame # first frame timestamp
function TextSystem.Character:firstFrame(...) end

---
--- Gets the attached tags
---
---@return any tags # attached tags
function TextSystem.Character:tags(...) end

---
--- Gets the pop-in flag
---
---@return any pop_in # pop-in flag
function TextSystem.Character:pop_in(...) end

---
--- Gets the pop-in delay time
---
---@return any pop_in_delay # pop-in delay time
function TextSystem.Character:pop_in_delay(...) end

---
--- Gets the creation timestamp
---
---@return any createdTime # creation timestamp
function TextSystem.Character:createdTime(...) end

---
--- Gets the parent text object
---
---@return any parentText # parent text object
function TextSystem.Character:parentText(...) end

---
--- Gets the is final character in its text
---
---@return any isFinalCharacterInText # is final character in its text
function TextSystem.Character:isFinalCharacterInText(...) end

---
--- Gets the effect finished flag
---
---@return any effectFinished # effect finished flag
function TextSystem.Character:effectFinished(...) end

---
--- Gets the is an image glyph
---
---@return any isImage # is an image glyph
function TextSystem.Character:isImage(...) end

---
--- Gets the image shadow enabled
---
---@return any imageShadowEnabled # image shadow enabled
function TextSystem.Character:imageShadowEnabled(...) end

---
--- Gets the sprite UUID
---
---@return any spriteUUID # sprite UUID
function TextSystem.Character:spriteUUID(...) end

---
--- Gets the image scale factor
---
---@return any imageScale # image scale factor
function TextSystem.Character:imageScale(...) end

---
--- Gets the foreground tint
---
---@return any fgTint # foreground tint
function TextSystem.Character:fgTint(...) end

---
--- Gets the background tint
---
---@return any bgTint # background tint
function TextSystem.Character:bgTint(...) end


---
--- Main text object with content, layout, and effects
---
---@class TextSystem.Text
TextSystem.Text = {
}

---
--- Gets the raw get_value_callback
---
---@return any get_value_callback # raw value
function TextSystem.Text:get_value_callback(...) end

---
--- Gets the raw onStringContentUpdatedOrChangedViaCallback
---
---@return any onStringContentUpdatedOrChangedViaCallback # raw value
function TextSystem.Text:onStringContentUpdatedOrChangedViaCallback(...) end

---
--- Gets the raw effectStringsToApplyGloballyOnTextChange
---
---@return any effectStringsToApplyGloballyOnTextChange # raw value
function TextSystem.Text:effectStringsToApplyGloballyOnTextChange(...) end

---
--- Gets the raw onFinishedEffect
---
---@return any onFinishedEffect # raw value
function TextSystem.Text:onFinishedEffect(...) end

---
--- Gets the raw pop_in_enabled
---
---@return any pop_in_enabled # raw value
function TextSystem.Text:pop_in_enabled(...) end

---
--- Gets the raw shadow_enabled
---
---@return any shadow_enabled # raw value
function TextSystem.Text:shadow_enabled(...) end

---
--- Gets the raw width
---
---@return any width # raw value
function TextSystem.Text:width(...) end

---
--- Gets the raw height
---
---@return any height # raw value
function TextSystem.Text:height(...) end

---
--- Gets the raw rawText
---
---@return any rawText # raw value
function TextSystem.Text:rawText(...) end

---
--- Gets the raw characters
---
---@return any characters # raw value
function TextSystem.Text:characters(...) end

---
--- Gets the raw fontData
---
---@return any fontData # raw value
function TextSystem.Text:fontData(...) end

---
--- Gets the raw fontSize
---
---@return any fontSize # raw value
function TextSystem.Text:fontSize(...) end

---
--- Gets the raw wrapEnabled
---
---@return any wrapEnabled # raw value
function TextSystem.Text:wrapEnabled(...) end

---
--- Gets the raw wrapWidth
---
---@return any wrapWidth # raw value
function TextSystem.Text:wrapWidth(...) end

---
--- Gets the raw prevRenderScale
---
---@return any prevRenderScale # raw value
function TextSystem.Text:prevRenderScale(...) end

---
--- Gets the raw renderScale
---
---@return any renderScale # raw value
function TextSystem.Text:renderScale(...) end

---
--- Gets the raw createdTime
---
---@return any createdTime # raw value
function TextSystem.Text:createdTime(...) end

---
--- Gets the raw effectStartTime
---
---@return any effectStartTime # raw value
function TextSystem.Text:effectStartTime(...) end

---
--- Gets the raw applyTransformRotationAndScale
---
---@return any applyTransformRotationAndScale # raw value
function TextSystem.Text:applyTransformRotationAndScale(...) end


---
--- Enum of text alignment values
---
---@class TextSystem.TextAlignment
TextSystem.TextAlignment = {
    LEFT = 0,  -- Left-aligned text
    CENTER = 1,  -- Centered text
    RIGHT = 2,  -- Right-aligned text
    JUSTIFIED = 3  -- Justified text
}


---
--- Enum of text wrap modes
---
---@class TextSystem.TextWrapMode
TextSystem.TextWrapMode = {
    WORD = 0,  -- Wrap on word boundaries
    CHARACTER = 1  -- Wrap on individual characters
}


---
--- 
---
---@class TextSystem.Builders
TextSystem.Builders = {
}


---
--- Fluent builder for creating TextSystem.Text objects
---
---@class TextSystem.Builders.TextBuilder
TextSystem.Builders.TextBuilder = {
}

---
--- Builder method setRawText
---
---@param v any # argument for setRawText
function TextSystem.Builders.TextBuilder:setRawText(...) end

---
--- Builder method setFontData
---
---@param v any # argument for setFontData
function TextSystem.Builders.TextBuilder:setFontData(...) end

---
--- Builder method setOnFinishedEffect
---
---@param v any # argument for setOnFinishedEffect
function TextSystem.Builders.TextBuilder:setOnFinishedEffect(...) end

---
--- Builder method setFontSize
---
---@param v any # argument for setFontSize
function TextSystem.Builders.TextBuilder:setFontSize(...) end

---
--- Builder method setWrapWidth
---
---@param v any # argument for setWrapWidth
function TextSystem.Builders.TextBuilder:setWrapWidth(...) end

---
--- Builder method setAlignment
---
---@param v any # argument for setAlignment
function TextSystem.Builders.TextBuilder:setAlignment(...) end

---
--- Builder method setWrapMode
---
---@param v any # argument for setWrapMode
function TextSystem.Builders.TextBuilder:setWrapMode(...) end

---
--- Builder method setCreatedTime
---
---@param v any # argument for setCreatedTime
function TextSystem.Builders.TextBuilder:setCreatedTime(...) end

---
--- Builder method setPopInEnabled
---
---@param v any # argument for setPopInEnabled
function TextSystem.Builders.TextBuilder:setPopInEnabled(...) end

---
--- Builder method build
---
---@param v any # argument for build
function TextSystem.Builders.TextBuilder:build(...) end


---
--- Container for text system utility functions
---
---@class TextSystem.Functions
TextSystem.Functions = {
}


---
--- Animation system functions
---
---@class animation_system
local animation_system = {
}


---
--- 
---
---@class particle
local particle = {
}


---
--- How particles should be rendered
---
---@class particle.ParticleRenderType
particle.ParticleRenderType = {
    TEXTURE = 0,  -- Use a sprite texture
    RECTANGLE = 1,  -- Draw as a rectangle
    CIRCLE = 2  -- Draw as a circle
}


---
--- Single particle instance
---
---@class particle.Particle
particle.Particle = {
}


---
--- Defines how particles are emitted
---
---@class particle.ParticleEmitter
particle.ParticleEmitter = {
}


---
--- Configuration for animated particle appearance
---
---@class particle.ParticleAnimationConfig
particle.ParticleAnimationConfig = {
}


---
--- Root table for shader pipeline helpers and types.
---
---@class shader_pipeline
local shader_pipeline = {
}


---
--- Defines a single shader pass with configurable uniforms.
---
---@class shader_pipeline.ShaderPass

shader_pipeline.ShaderPass = {}


---
--- Source input for shader overlay drawing.
---
---@class shader_pipeline.OverlayInputSource
shader_pipeline.OverlayInputSource = {
    BaseSprite = 0,  -- Use the base sprite
    PostPassResult = 1  -- Use the result from previous pass
}


---
--- Defines a shader overlay draw operation.
---
---@class shader_pipeline.ShaderOverlayDraw

shader_pipeline.ShaderOverlayDraw = {}


---
--- Holds a set of shader passes and overlays for rendering.
---
---@class shader_pipeline.ShaderPipelineComponent

shader_pipeline.ShaderPipelineComponent = {}


---
--- Create a new ShaderPass and populate uniforms.
---
---@class shader_pipeline.createShaderPass
shader_pipeline.createShaderPass = {
}


---
--- Random number generation utilities and helper functions
---
---@class random_utils
local random_utils = {
}


---
--- namespace for rendering & layer operations
---
---@class layer
local layer = {
    layers = table  -- Global list of layers
}


---
--- Stores Z-index for layer sorting
---
---@class layer.LayerOrderComponent
---@field zIndex integer Z sort order

layer.LayerOrderComponent = {}


---
--- Represents a drawing layer and its properties.
---
---@class layer.Layer
---@field canvases table Map of canvas names to textures
---@field drawCommands table Command list
---@field fixed boolean Whether layer is fixed
---@field zIndex integer Z-index
---@field backgroundColor Color Background fill color
---@field commands table Draw commands list
---@field isSorted boolean True if layer is sorted

layer.Layer = {}


---
--- Drawing instruction types used by Layer system
---
---@class layer.DrawCommandType
layer.DrawCommandType = {
    BeginDrawing = 0,  -- Start drawing a layer frame
    EndDrawing = 1,  -- End drawing a layer frame
    ClearBackground = 2,  -- Clear background with color
    Translate = 3,  -- Translate coordinate system
    Scale = 4,  -- Scale coordinate system
    Rotate = 5,  -- Rotate coordinate system
    AddPush = 6,  -- Push transform matrix
    AddPop = 7,  -- Pop transform matrix
    PushMatrix = 8,  -- Explicit push matrix command
    PopMatrix = 9,  -- Explicit pop matrix command
    DrawCircle = 10,  -- Draw a filled circle
    DrawRectangle = 11,  -- Draw a filled rectangle
    DrawRectanglePro = 12,  -- Draw a scaled and rotated rectangle
    DrawRectangleLinesPro = 13,  -- Draw rectangle outline
    DrawLine = 14,  -- Draw a line
    DrawDashedLine = 15,  -- Draw a dashed line
    DrawText = 16,  -- Draw plain text
    DrawTextCentered = 17,  -- Draw text centered
    TextPro = 18,  -- Draw stylized/proportional text
    DrawImage = 19,  -- Draw a texture/image
    TexturePro = 20,  -- Draw transformed texture
    DrawEntityAnimation = 21,  -- Draw animation of an entity
    DrawTransformEntityAnimation = 22,  -- Draw transform-aware animation
    DrawTransformEntityAnimationPipeline = 23,  -- Draw pipelined animation with transform
    SetShader = 24,  -- Set active shader
    ResetShader = 25,  -- Reset to default shader
    SetBlendMode = 26,  -- Set blend mode
    UnsetBlendMode = 27,  -- Reset blend mode
    SendUniformFloat = 28,  -- Send float uniform to shader
    SendUniformInt = 29,  -- Send int uniform to shader
    SendUniformVec2 = 30,  -- Send vec2 uniform to shader
    SendUniformVec3 = 31,  -- Send vec3 uniform to shader
    SendUniformVec4 = 32,  -- Send vec4 uniform to shader
    SendUniformFloatArray = 33,  -- Send float array uniform to shader
    SendUniformIntArray = 34,  -- Send int array uniform to shader
    Vertex = 35,  -- Draw raw vertex
    BeginOpenGLMode = 36,  -- Begin native OpenGL mode
    EndOpenGLMode = 37,  -- End native OpenGL mode
    SetColor = 38,  -- Set current draw color
    SetLineWidth = 39,  -- Set width of lines
    SetTexture = 40,  -- Bind texture to use
    RenderRectVerticesFilledLayer = 41,  -- Draw filled rects from vertex list
    RenderRectVerticesOutlineLayer = 42,  -- Draw outlined rects from vertex list
    DrawPolygon = 43,  -- Draw a polygon
    RenderNPatchRect = 44,  -- Draw a 9-patch rectangle
    DrawTriangle = 45  -- Draw a triangle
}


---
--- 
---
---@class layer.CmdBeginDrawing
---@field dummy false Unused field

layer.CmdBeginDrawing = {}


---
--- 
---
---@class layer.CmdEndDrawing
---@field dummy false Unused field

layer.CmdEndDrawing = {}


---
--- 
---
---@class layer.CmdClearBackground
---@field color Color Background color

layer.CmdClearBackground = {}


---
--- 
---
---@class layer.CmdTranslate
---@field x number X offset
---@field y number Y offset

layer.CmdTranslate = {}


---
--- 
---
---@class layer.CmdScale
---@field scaleX number Scale in X
---@field scaleY number Scale in Y

layer.CmdScale = {}


---
--- 
---
---@class layer.CmdRotate
---@field angle number Rotation angle in degrees

layer.CmdRotate = {}


---
--- 
---
---@class layer.CmdAddPush
---@field camera table Camera parameters

layer.CmdAddPush = {}


---
--- 
---
---@class layer.CmdAddPop
---@field dummy false Unused field

layer.CmdAddPop = {}


---
--- 
---
---@class layer.CmdPushMatrix
---@field dummy false Unused field

layer.CmdPushMatrix = {}


---
--- 
---
---@class layer.CmdPopMatrix
---@field dummy false Unused field

layer.CmdPopMatrix = {}


---
--- 
---
---@class layer.CmdDrawCircle
---@field x number Center X
---@field y number Center Y
---@field radius number Radius
---@field color Color Fill color

layer.CmdDrawCircle = {}


---
--- 
---
---@class layer.CmdDrawRectangle
---@field x number Top-left X
---@field y number Top-left Y
---@field width number Width
---@field height number Height
---@field color Color Fill color
---@field lineWidth number Line width

layer.CmdDrawRectangle = {}


---
--- 
---
---@class layer.CmdDrawRectanglePro
---@field offsetX number Offset X
---@field offsetY number Offset Y
---@field size Vector2 Size
---@field rotationCenter Vector2 Rotation center
---@field rotation number Rotation
---@field color Color Color

layer.CmdDrawRectanglePro = {}


---
--- 
---
---@class layer.CmdDrawRectangleLinesPro
---@field offsetX number Offset X
---@field offsetY number Offset Y
---@field size Vector2 Size
---@field lineThickness number Line thickness
---@field color Color Color

layer.CmdDrawRectangleLinesPro = {}


---
--- 
---
---@class layer.CmdDrawLine
---@field x1 number Start X
---@field y1 number Start Y
---@field x2 number End X
---@field y2 number End Y
---@field color Color Line color
---@field lineWidth number Line width

layer.CmdDrawLine = {}


---
--- 
---
---@class layer.CmdDrawDashedLine
---@field x1 number Start X
---@field y1 number Start Y
---@field x2 number End X
---@field y2 number End Y
---@field dashSize number Dash size
---@field gapSize number Gap size
---@field color Color Color
---@field lineWidth number Line width

layer.CmdDrawDashedLine = {}


---
--- 
---
---@class layer.CmdDrawText
---@field text string Text
---@field font Font Font
---@field x number X
---@field y number Y
---@field color Color Color
---@field fontSize number Font size

layer.CmdDrawText = {}


---
--- 
---
---@class layer.CmdDrawTextCentered
---@field text string Text
---@field font Font Font
---@field x number X
---@field y number Y
---@field color Color Color
---@field fontSize number Font size

layer.CmdDrawTextCentered = {}


---
--- 
---
---@class layer.CmdTextPro
---@field text string Text
---@field font Font Font
---@field x number X
---@field y number Y
---@field origin Vector2 Origin
---@field rotation number Rotation
---@field fontSize number Font size
---@field spacing number Spacing
---@field color Color Color

layer.CmdTextPro = {}


---
--- 
---
---@class layer.CmdDrawImage
---@field image Texture2D Image
---@field x number X
---@field y number Y
---@field rotation number Rotation
---@field scaleX number Scale X
---@field scaleY number Scale Y
---@field color Color Tint color

layer.CmdDrawImage = {}


---
--- 
---
---@class layer.CmdTexturePro
---@field texture Texture2D Texture
---@field source Rectangle Source rect
---@field offsetX number Offset X
---@field offsetY number Offset Y
---@field size Vector2 Size
---@field rotationCenter Vector2 Rotation center
---@field rotation number Rotation
---@field color Color Color

layer.CmdTexturePro = {}


---
--- 
---
---@class layer.CmdDrawEntityAnimation
---@field e Entity entt::entity
---@field registry Registry EnTT registry
---@field x number X
---@field y number Y

layer.CmdDrawEntityAnimation = {}


---
--- 
---
---@class layer.CmdDrawTransformEntityAnimation
---@field e Entity entt::entity
---@field registry Registry EnTT registry

layer.CmdDrawTransformEntityAnimation = {}


---
--- 
---
---@class layer.CmdDrawTransformEntityAnimationPipeline
---@field e Entity entt::entity
---@field registry Registry EnTT registry

layer.CmdDrawTransformEntityAnimationPipeline = {}


---
--- 
---
---@class layer.CmdSetShader
---@field shader Shader Shader object

layer.CmdSetShader = {}


---
--- 
---
---@class layer.CmdResetShader

layer.CmdResetShader = {}


---
--- 
---
---@class layer.CmdSetBlendMode
---@field blendMode number Blend mode

layer.CmdSetBlendMode = {}


---
--- 
---
---@class layer.CmdUnsetBlendMode
---@field dummy false Unused field

layer.CmdUnsetBlendMode = {}


---
--- 
---
---@class layer.CmdSendUniformFloat
---@field shader Shader Shader
---@field uniform string Uniform name
---@field value number Float value

layer.CmdSendUniformFloat = {}


---
--- 
---
---@class layer.CmdSendUniformInt
---@field shader Shader Shader
---@field uniform string Uniform name
---@field value number Int value

layer.CmdSendUniformInt = {}


---
--- 
---
---@class layer.CmdSendUniformVec2
---@field shader Shader Shader
---@field uniform string Uniform name
---@field value Vector2 Vec2 value

layer.CmdSendUniformVec2 = {}


---
--- 
---
---@class layer.CmdSendUniformVec3
---@field shader Shader Shader
---@field uniform string Uniform name
---@field value Vector3 Vec3 value

layer.CmdSendUniformVec3 = {}


---
--- 
---
---@class layer.CmdSendUniformVec4
---@field shader Shader Shader
---@field uniform string Uniform name
---@field value Vector4 Vec4 value

layer.CmdSendUniformVec4 = {}


---
--- 
---
---@class layer.CmdSendUniformFloatArray
---@field shader Shader Shader
---@field uniform string Uniform name
---@field values table Float array

layer.CmdSendUniformFloatArray = {}


---
--- 
---
---@class layer.CmdSendUniformIntArray
---@field shader Shader Shader
---@field uniform string Uniform name
---@field values table Int array

layer.CmdSendUniformIntArray = {}


---
--- 
---
---@class layer.CmdVertex
---@field v Vector3 Position
---@field color Color Vertex color

layer.CmdVertex = {}


---
--- 
---
---@class layer.CmdBeginOpenGLMode
---@field mode number GL mode enum

layer.CmdBeginOpenGLMode = {}


---
--- 
---
---@class layer.CmdEndOpenGLMode
---@field dummy false Unused field

layer.CmdEndOpenGLMode = {}


---
--- 
---
---@class layer.CmdSetColor
---@field color Color Draw color

layer.CmdSetColor = {}


---
--- 
---
---@class layer.CmdSetLineWidth
---@field lineWidth number Line width

layer.CmdSetLineWidth = {}


---
--- 
---
---@class layer.CmdSetTexture
---@field texture Texture2D Texture to bind

layer.CmdSetTexture = {}


---
--- 
---
---@class layer.CmdRenderRectVerticesFilledLayer
---@field outerRec Rectangle Outer rectangle
---@field progressOrFullBackground bool Mode
---@field cache table Vertex cache
---@field color Color Fill color

layer.CmdRenderRectVerticesFilledLayer = {}


---
--- 
---
---@class layer.CmdRenderRectVerticesOutlineLayer
---@field cache table Vertex cache
---@field color Color Outline color
---@field useFullVertices bool Use full vertices

layer.CmdRenderRectVerticesOutlineLayer = {}


---
--- 
---
---@class layer.CmdDrawPolygon
---@field vertices table Vertex array
---@field color Color Polygon color
---@field lineWidth number Line width

layer.CmdDrawPolygon = {}


---
--- 
---
---@class layer.CmdRenderNPatchRect
---@field sourceTexture Texture2D Source texture
---@field info NPatchInfo Nine-patch info
---@field dest Rectangle Destination
---@field origin Vector2 Origin
---@field rotation number Rotation
---@field tint Color Tint color

layer.CmdRenderNPatchRect = {}


---
--- 
---
---@class layer.CmdDrawTriangle
---@field p1 Vector2 Point 1
---@field p2 Vector2 Point 2
---@field p3 Vector2 Point 3
---@field color Color Triangle color

layer.CmdDrawTriangle = {}


---
--- A single draw command with type, data payload, and z-order.
---
---@class layer.DrawCommandV2
---@field type number The draw command type enum
---@field data any The actual command data (CmdX struct)
---@field z number Z-order depth value for sorting

layer.DrawCommandV2 = {}


---
--- 
---
---@class command_buffer
local command_buffer = {
}


---
--- Manages shaders, their uniforms, and rendering modes.
---
---@class shaders
local shaders = {
}


---
--- A collection of uniform values to be applied to a shader.
---
---@class shaders.ShaderUniformSet
shaders.ShaderUniformSet = {
}

---
--- Sets or updates a uniform value by name within the set.
---
---@param name string # The name of the uniform to set.
---@param value any # The value to set (e.g., number, boolean, Vector2, Texture2D, etc.).
function shaders.ShaderUniformSet:set(...) end

---
--- Gets a uniform's value by its name.
---
---@param name string # The name of the uniform to retrieve.
---@return any|nil # The value of the uniform, or nil if not found.
function shaders.ShaderUniformSet:get(...) end


---
--- An entity component for managing per-entity shader uniforms.
---
---@class shaders.ShaderUniformComponent
shaders.ShaderUniformComponent = {
}

---
--- Sets a static uniform value for a specific shader within this component.
---
---@param shaderName string # The name of the shader this uniform belongs to.
---@param uniformName string # The name of the uniform to set.
---@param value any # The value to assign to the uniform.
function shaders.ShaderUniformComponent:set(...) end

---
--- Registers a callback to dynamically compute and apply uniforms for an entity.
---
---@param shaderName string # The shader this callback applies to.
---@param callback fun(shader: Shader, entity: Entity) # A function called just before rendering the entity.
function shaders.ShaderUniformComponent:registerEntityUniformCallback(...) end

---
--- Returns the underlying ShaderUniformSet for a specific shader, or nil if not found.
---
---@param shaderName string # The name of the shader.
---@return shaders.ShaderUniformSet|nil
function shaders.ShaderUniformComponent:getSet(...) end

---
--- Applies this component's static uniforms and executes its dynamic callbacks for a given entity.
---
---@param shader Shader # The target shader.
---@param shaderName string # The name of the shader configuration to apply.
---@param entity Entity # The entity to source dynamic uniform values from.
function shaders.ShaderUniformComponent:applyToShaderForEntity(...) end


---
--- namespace for localization functions
---
---@class localization
local localization = {
}


---
--- A system for creating, managing, and updating timers.
---
---@class timer
local timer = {
}


---
--- Mathematical utility functions for timers.
---
---@class timer.math
timer.math = {
}


---
--- Specifies the behavior of a timer.
---
---@class timer.TimerType
timer.TimerType = {
    RUN = 0,  -- Runs once immediately.
    AFTER = 1,  -- Runs once after a delay.
    COOLDOWN = 2,  -- A resettable one-shot timer.
    EVERY = 3,  -- Runs repeatedly at an interval.
    EVERY_STEP = 4,  -- Runs repeatedly every N frames.
    FOR = 5,  -- Runs every frame for a duration.
    TWEEN = 6  -- Interpolates a value over a duration.
}


---
--- A system for managing and processing sequential and timed events.
---
---@class EventQueueSystem
local EventQueueSystem = {
}


---
--- Collection of easing functions for tweening.
---
---@class EventQueueSystem.EaseType
EventQueueSystem.EaseType = {
    LERP = 0,  -- Linear interpolation.
    ELASTIC_IN = 1,  -- Elastic in.
    ELASTIC_OUT = 2,  -- Elastic out.
    QUAD_IN = 3,  -- Quadratic in.
    QUAD_OUT = 4  -- Quadratic out.
}


---
--- Defines when an event in the queue should be triggered.
---
---@class EventQueueSystem.TriggerType
EventQueueSystem.TriggerType = {
    IMMEDIATE = 0,  -- Triggers immediately.
    AFTER = 1,  -- Triggers after a delay.
    BEFORE = 2,  -- Triggers before a delay.
    EASE = 3,  -- Triggers as part of an ease/tween.
    CONDITION = 4  -- Triggers when a condition is met.
}


---
--- Defines which clock an event timer uses.
---
---@class EventQueueSystem.TimerType
EventQueueSystem.TimerType = {
    REAL_TIME = 0,  -- Uses the real-world clock, unaffected by game pause.
    TOTAL_TIME_EXCLUDING_PAUSE = 1  -- Uses the game clock, which may be paused.
}


---
--- Data for an easing/tweening operation.
---
---@class EventQueueSystem.EaseData
---@field type EventQueueSystem.EaseType The easing function to use.
---@field startValue number The starting value of the tween.
---@field endValue number The ending value of the tween.
---@field startTime number The start time of the tween.
---@field endTime number The end time of the tween.
---@field setValueCallback fun(value:number) Callback to apply the tweened value.
---@field getValueCallback fun():number Callback to get the current value.

EventQueueSystem.EaseData = {}


---
--- A condition that must be met for an event to trigger.
---
---@class EventQueueSystem.ConditionData
---@field check fun():boolean A function that returns true when the condition is met.

EventQueueSystem.ConditionData = {}


---
--- A single event in the event queue.
---
---@class EventQueueSystem.Event
---@field eventTrigger EventQueueSystem.TriggerType When the event should trigger.
---@field blocksQueue boolean If true, no other events will process until this one completes.
---@field canBeBlocked boolean If true, this event can be blocked by another.
---@field complete boolean True if the event has finished processing.
---@field timerStarted boolean Internal flag for timed events.
---@field delaySeconds number The delay in seconds for 'AFTER' triggers.
---@field retainAfterCompletion boolean If true, the event remains in the queue after completion.
---@field createdWhilePaused boolean If true, the event was created while the game was paused.
---@field func function The callback function to execute.
---@field timerType EventQueueSystem.TimerType The clock type to use for this event's timer.
---@field time number Internal time tracking for the event.
---@field ease EventQueueSystem.EaseData Easing data for tweening events.
---@field condition EventQueueSystem.ConditionData Condition data for conditional events.
---@field tag string An optional tag for finding the event later.
---@field debugID string A debug identifier for the event.
---@field deleteNextCycleImmediately boolean If true, deletes the event on the next update cycle.

EventQueueSystem.Event = {}


---
--- A builder for creating EaseData objects.
---
---@class EventQueueSystem.EaseDataBuilder
EventQueueSystem.EaseDataBuilder = {
}

---
--- Sets the ease type.
---
---@param type EventQueueSystem.EaseType
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:Type(...) end

---
--- Sets the starting value.
---
---@param value number
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:StartValue(...) end

---
--- Sets the ending value.
---
---@param value number
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:EndValue(...) end

---
--- Sets the start time.
---
---@param time number
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:StartTime(...) end

---
--- Sets the end time.
---
---@param time number
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:EndTime(...) end

---
--- Sets the 'set value' callback.
---
---@param cb fun(value:number)
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:SetCallback(...) end

---
--- Sets the 'get value' callback.
---
---@param cb fun():number
---@return EventQueueSystem.EaseDataBuilder
function EventQueueSystem.EaseDataBuilder:GetCallback(...) end

---
--- Builds the final EaseData object.
---
---@return EventQueueSystem.EaseData
function EventQueueSystem.EaseDataBuilder:Build(...) end


---
--- A builder for creating and queuing events.
---
---@class EventQueueSystem.EventBuilder
EventQueueSystem.EventBuilder = {
}

---
--- Sets the event trigger type.
---
---@param type EventQueueSystem.TriggerType
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Trigger(...) end

---
--- Sets if the event blocks the queue.
---
---@param blocks boolean
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:BlocksQueue(...) end

---
--- Sets if the event can be blocked.
---
---@param can_be_blocked boolean
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:CanBeBlocked(...) end

---
--- Sets the delay for an 'AFTER' trigger.
---
---@param seconds number
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Delay(...) end

---
--- Sets the main callback function.
---
---@param cb function
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Func(...) end

---
--- Attaches ease data to the event.
---
---@param easeData EventQueueSystem.EaseData
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Ease(...) end

---
--- Attaches a condition to the event.
---
---@param condData EventQueueSystem.ConditionData
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Condition(...) end

---
--- Assigns a string tag to the event.
---
---@param tag string
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:Tag(...) end

---
--- Assigns a debug ID to the event.
---
---@param id string
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:DebugID(...) end

---
--- Sets if the event is kept after completion.
---
---@param retain boolean
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:RetainAfterCompletion(...) end

---
--- Marks the event as created while paused.
---
---@param was_paused boolean
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:CreatedWhilePaused(...) end

---
--- Sets the timer clock type for the event.
---
---@param type EventQueueSystem.TimerType
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:TimerType(...) end

---
--- Starts the timer immediately.
---
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:StartTimer(...) end

---
--- Flags the event for deletion on the next cycle.
---
---@param delete_next boolean
---@return EventQueueSystem.EventBuilder
function EventQueueSystem.EventBuilder:DeleteNextCycleImmediately(...) end

---
--- Builds the final Event object.
---
---@return EventQueueSystem.Event
function EventQueueSystem.EventBuilder:Build(...) end

---
--- Builds the event and adds it directly to the queue.
---
---@return nil
function EventQueueSystem.EventBuilder:AddToQueue(...) end


---
--- General-purpose utility functions.
---
---@class util
local util = {
}


---
--- Manages an entity's position, size, rotation, and scale, with spring dynamics for smooth visual updates.
---
---@class Transform
---@field actualX number The logical X position.
---@field visualX number The visual (spring-interpolated) X position.
---@field actualY number The logical Y position.
---@field visualY number The visual (spring-interpolated) Y position.
---@field actualW number The logical width.
---@field visualW number The visual width.
---@field actualH number The logical height.
---@field visualH number The visual height.
---@field rotation number The logical rotation in degrees.
---@field scale number The logical scale multiplier.

Transform = {}

---
--- Updates cached transform values.
---
---@overload fun(self, force:boolean)
---@overload fun(self, x:Spring, y:Spring, w:Spring, h:Spring, r:Spring, s:Spring, force:boolean)
function Transform:updateCachedValues(...) end

---
--- Gets the visual rotation.
---
---@return number
function Transform:visualR(...) end

---
--- Gets the visual rotation including dynamic motion.
---
---@return number
function Transform:visualRWithMotion(...) end

---
--- Gets the visual scale.
---
---@return number
function Transform:visualS(...) end

---
--- Gets the visual scale including dynamic motion.
---
---@return number
function Transform:visualSWithMotion(...) end

---
--- Gets the X position spring.
---
---@return Spring
function Transform:xSpring(...) end

---
--- Gets the Y position spring.
---
---@return Spring
function Transform:ySpring(...) end

---
--- Gets the width spring.
---
---@return Spring
function Transform:wSpring(...) end

---
--- Gets the height spring.
---
---@return Spring
function Transform:hSpring(...) end

---
--- Gets the rotation spring.
---
---@return Spring
function Transform:rSpring(...) end

---
--- Gets the scale spring.
---
---@return Spring
function Transform:sSpring(...) end

---
--- Gets the X-axis hover buffer.
---
---@return number
function Transform:hoverBufferX(...) end

---
--- Gets the Y-axis hover buffer.
---
---@return number
function Transform:hoverBufferY(...) end


---
--- Defines how an entity relates to its master in the transform hierarchy.
---
---@class InheritedPropertiesType
local InheritedPropertiesType = {
    RoleRoot = 0,  -- A root object that is not influenced by a master.
    RoleInheritor = 1,  -- Inherits transformations from a master.
    RoleCarbonCopy = 2,  -- Perfectly mirrors its master's transformations.
    PermanentAttachment = 3  -- A permanent, non-detachable inheritor.
}


---
--- Defines the strength of a transform bond.
---
---@class InheritedPropertiesSync
local InheritedPropertiesSync = {
    Strong = 0,  -- The property is directly copied from the master.
    Weak = 1  -- The property is influenced by but not locked to the master.
}


---
--- Bitmask flags for aligning an entity to its master.
---
---@class AlignmentFlag
local AlignmentFlag = {
    NONE = 0,  -- No alignment.
    HORIZONTAL_LEFT = 1,  -- Align left edges.
    HORIZONTAL_CENTER = 2,  -- Align horizontal centers.
    HORIZONTAL_RIGHT = 4,  -- Align right edges.
    VERTICAL_TOP = 8,  -- Align top edges.
    VERTICAL_CENTER = 16,  -- Align vertical centers.
    VERTICAL_BOTTOM = 32,  -- Align bottom edges.
    ALIGN_TO_INNER_EDGES = 64  -- Align to inner instead of outer edges.
}


---
--- Stores alignment flags and offsets for an inherited property.
---
---@class Alignment
---@field alignment integer The raw bitmask of alignment flags.
---@field extraOffset Vector2 Additional fine-tuning offset.
---@field prevExtraOffset Vector2 Previous frame's fine-tuning offset.

Alignment = {}

---
--- Checks if a specific alignment flag is set.
---
---@param flag AlignmentFlag
---@return boolean
function Alignment:hasFlag(...) end

---
--- Adds an alignment flag.
---
---@param flag AlignmentFlag
---@return nil
function Alignment:addFlag(...) end

---
--- Removes an alignment flag.
---
---@param flag AlignmentFlag
---@return nil
function Alignment:removeFlag(...) end

---
--- Toggles an alignment flag.
---
---@param flag AlignmentFlag
---@return nil
function Alignment:toggleFlag(...) end


---
--- Defines how an entity inherits transform properties from a master entity.
---
---@class InheritedProperties
---@field role_type InheritedPropertiesType The role of this entity in the hierarchy.
---@field master Entity The master entity this entity inherits from.
---@field offset Vector2 The current offset from the master.
---@field prevOffset Vector2 The previous frame's offset.
---@field location_bond InheritedPropertiesSync|nil The sync bond for location.
---@field size_bond InheritedPropertiesSync|nil The sync bond for size.
---@field rotation_bond InheritedPropertiesSync|nil The sync bond for rotation.
---@field scale_bond InheritedPropertiesSync|nil The sync bond for scale.
---@field flags Alignment|nil Alignment flags and data.

InheritedProperties = {}


---
--- A fluent builder for creating InheritedProperties components.
---
---@class InheritedPropertiesBuilder
local InheritedPropertiesBuilder = {
}

---
--- Sets the role type.
---
---@param type InheritedPropertiesType
---@return self
function InheritedPropertiesBuilder:addRoleType(...) end

---
--- Sets the master entity.
---
---@param master Entity
---@return self
function InheritedPropertiesBuilder:addMaster(...) end

---
--- Sets the offset.
---
---@param offset Vector2
---@return self
function InheritedPropertiesBuilder:addOffset(...) end

---
--- Sets the location bond.
---
---@param bond InheritedPropertiesSync
---@return self
function InheritedPropertiesBuilder:addLocationBond(...) end

---
--- Sets the size bond.
---
---@param bond InheritedPropertiesSync
---@return self
function InheritedPropertiesBuilder:addSizeBond(...) end

---
--- Sets the rotation bond.
---
---@param bond InheritedPropertiesSync
---@return self
function InheritedPropertiesBuilder:addRotationBond(...) end

---
--- Sets the scale bond.
---
---@param bond InheritedPropertiesSync
---@return self
function InheritedPropertiesBuilder:addScaleBond(...) end

---
--- Sets the alignment flags.
---
---@param flags AlignmentFlag
---@return self
function InheritedPropertiesBuilder:addAlignment(...) end

---
--- Sets the alignment offset.
---
---@param offset Vector2
---@return self
function InheritedPropertiesBuilder:addAlignmentOffset(...) end

---
--- Constructs the final InheritedProperties object.
---
---@return InheritedProperties
function InheritedPropertiesBuilder:build(...) end


---
--- A table of optional script-defined callback methods for a GameObject.
---
---@class GameObjectMethods
---@field getObjectToDrag function|nil Returns the entity that should be dragged.
---@field update function|nil Called every frame.
---@field draw function|nil Called every frame for drawing.
---@field onClick function|nil Called on click.
---@field onRelease function|nil Called on click release.
---@field onHover function|nil Called when hover starts.
---@field onStopHover function|nil Called when hover ends.
---@field onDrag function|nil Called while dragging.
---@field onStopDrag function|nil Called when dragging stops.

GameObjectMethods = {}


---
--- A collection of boolean flags representing the current state of a GameObject.
---
---@class GameObjectState
---@field visible boolean
---@field collisionEnabled boolean
---@field isColliding boolean
---@field focusEnabled boolean
---@field isBeingFocused boolean
---@field hoverEnabled boolean
---@field isBeingHovered boolean
---@field enlargeOnHover boolean
---@field enlargeOnDrag boolean
---@field clickEnabled boolean
---@field isBeingClicked boolean
---@field dragEnabled boolean
---@field isBeingDragged boolean
---@field triggerOnReleaseEnabled boolean
---@field isTriggeringOnRelease boolean
---@field isUnderOverlay boolean

GameObjectState = {}


---
--- The core component for a scene entity, managing hierarchy, state, and scriptable logic.
---
---@class GameObject
---@field parent Entity|nil
---@field children table<Entity, boolean>
---@field orderedChildren table<integer, Entity>
---@field ignoresPause boolean
---@field container Entity|nil
---@field collisionTransform Transform|nil
---@field clickTimeout number
---@field methods GameObjectMethods|nil
---@field updateFunction function|nil
---@field drawFunction function|nil
---@field state GameObjectState
---@field dragOffset Vector2
---@field clickOffset Vector2
---@field hoverOffset Vector2
---@field shadowDisplacement Vector2
---@field layerDisplacement Vector2
---@field layerDisplacementPrev Vector2
---@field shadowHeight number

GameObject = {}


---
--- Contains information about an entity's render and collision order.
---
---@class CollisionOrderInfo
---@field hasCollisionOrder boolean
---@field parentBox Rectangle
---@field treeOrder integer
---@field layerOrder integer

CollisionOrderInfo = {}


---
--- A simple component storing an entity's tree order for sorting.
---
---@class TreeOrderComponent
---@field order integer

TreeOrderComponent = {}


---
--- A global system for creating and managing all Transforms and GameObjects.
---
---@class transform
local transform = {
}


---
--- A tag component indicating an entity is attached to a UI element.
---
---@class ObjectAttachedToUITag
local ObjectAttachedToUITag = {
}


---
--- Defines the fundamental type or behavior of a UI element.
---
---@class UITypeEnum
local UITypeEnum = {
    NONE = 0,  -- No specific UI type.
    ROOT = 1,  -- The root of a UI tree.
    VERTICAL_CONTAINER = 2,  -- Arranges children vertically.
    HORIZONTAL_CONTAINER = 3,  -- Arranges children horizontally.
    SLIDER_UI = 4,  -- A slider control.
    INPUT_TEXT = 5,  -- A text input field.
    RECT_SHAPE = 6,  -- A simple rectangular shape.
    TEXT = 7,  -- A text label.
    OBJECT = 8  -- A UI element that displays a game object.
}


---
--- Core component for a UI element, linking its type, root, and configuration.
---
---@class UIElementComponent
---@field UIT UITypeEnum The type of this UI element.
---@field uiBox Entity The root entity of the UI box this element belongs to.
---@field config UIConfig The configuration settings for this element.

UIElementComponent = {}


---
--- Component for managing the state of a text input UI element.
---
---@class TextInput
---@field text string The current text content.
---@field cursorPos integer The position of the text cursor.
---@field maxLength integer The maximum allowed length of the text.
---@field allCaps boolean If true, all input is converted to uppercase.
---@field callback function|nil A callback function triggered on text change.

TextInput = {}


---
--- A component that hooks global text input to a specific text input entity.
---
---@class TextInputHook
---@field hookedEntity Entity The entity that currently has text input focus.

TextInputHook = {}


---
--- Defines a root of a UI tree, managing its draw layers.
---
---@class UIBoxComponent
---@field uiRoot Entity The root entity of this UI tree.
---@field drawLayers table A map of layers used for drawing the UI.

UIBoxComponent = {}


---
--- Holds dynamic state information for a UI element.
---
---@class UIState
---@field contentDimensions Vector2 The calculated dimensions of the element's content.
---@field textDrawable TextDrawable The drawable text object.
---@field last_clicked Entity The last entity that was clicked within this UI context.
---@field object_focus_timer number Timer for object focus events.
---@field focus_timer number General purpose focus timer.

UIState = {}


---
--- Represents a tooltip with a title and descriptive text.
---
---@class Tooltip
---@field title string The title of the tooltip.
---@field text string The main body text of the tooltip.

Tooltip = {}


---
--- Arguments for configuring focus and navigation behavior.
---
---@class FocusArgs
---@field button GamepadButton The gamepad button associated with this focus.
---@field snap_to boolean If the view should snap to this element when focused.
---@field registered boolean Whether this focus is registered with the focus system.
---@field type string The type of focus.
---@field claim_focus_from table<string, Entity> Entities this element can claim focus from.
---@field redirect_focus_to Entity|nil Redirect focus to another entity.
---@field nav table<string, Entity> Navigation map (e.g., nav.up = otherEntity).
---@field no_loop boolean Disables navigation looping.

FocusArgs = {}


---
--- Data for a UI slider element.
---
---@class SliderComponent
---@field color string
---@field text string
---@field min number
---@field max number
---@field value number
---@field decimal_places integer
---@field w number
---@field h number

SliderComponent = {}


---
--- Represents a tile in an inventory grid, potentially holding an item.
---
---@class InventoryGridTileComponent
---@field item Entity|nil The item entity occupying this tile.

InventoryGridTileComponent = {}


---
--- Defines how a UI element's background is styled.
---
---@class UIStylingType
local UIStylingType = {
    RoundedRectangle = 0,  -- A simple rounded rectangle.
    NinePatchBorders = 1  -- A 9-patch texture for scalable borders.
}


---
--- A comprehensive configuration component for defining all aspects of a UI element.
---
---@class UIConfig
---@field stylingType UIStylingType|nil The visual style of the element.
---@field nPatchInfo NPatchInfo|nil 9-patch slicing information.
---@field nPatchSourceTexture string|nil Texture path for the 9-patch.
---@field id string|nil Unique identifier for this UI element.
---@field instanceType string|nil A specific instance type for categorization.
---@field uiType UITypeEnum|nil The fundamental type of the UI element.
---@field drawLayer string|nil The layer on which this element is drawn.
---@field group string|nil The focus group this element belongs to.
---@field groupParent string|nil The parent focus group.
---@field location_bond InheritedPropertiesSync|nil Bonding strength for location.
---@field rotation_bond InheritedPropertiesSync|nil Bonding strength for rotation.
---@field size_bond InheritedPropertiesSync|nil Bonding strength for size.
---@field scale_bond InheritedPropertiesSync|nil Bonding strength for scale.
---@field offset Vector2|nil Offset from the parent/aligned position.
---@field scale number|nil Scale multiplier.
---@field textSpacing number|nil Spacing for text characters.
---@field focusWithObject boolean|nil Whether focus is tied to a game object.
---@field refreshMovement boolean|nil Force movement refresh.
---@field no_recalc boolean|nil Prevents recalculation of transform.
---@field non_recalc boolean|nil Alias for no_recalc.
---@field noMovementWhenDragged boolean|nil Prevents movement while being dragged.
---@field master string|nil ID of the master element.
---@field parent string|nil ID of the parent element.
---@field object Entity|nil The game object associated with this UI element.
---@field objectRecalculate boolean|nil Force recalculation based on the object.
---@field alignmentFlags integer|nil Bitmask of alignment flags.
---@field width number|nil Explicit width.
---@field height number|nil Explicit height.
---@field maxWidth number|nil Maximum width.
---@field maxHeight number|nil Maximum height.
---@field minWidth number|nil Minimum width.
---@field minHeight number|nil Minimum height.
---@field padding number|nil Padding around the content.
---@field color string|nil Background color.
---@field outlineColor string|nil Outline color.
---@field outlineThickness number|nil Outline thickness in pixels.
---@field makeMovementDynamic boolean|nil Enables springy movement.
---@field shadow Vector2|nil Offset for the shadow.
---@field outlineShadow Vector2|nil Offset for the outline shadow.
---@field shadowColor string|nil Color of the shadow.
---@field noFill boolean|nil If true, the background is not filled.
---@field pixelatedRectangle boolean|nil Use pixel-perfect rectangle drawing.
---@field canCollide boolean|nil Whether collision is possible.
---@field collideable boolean|nil Alias for canCollide.
---@field forceCollision boolean|nil Forces collision checks.
---@field button_UIE boolean|nil Behaves as a button.
---@field disable_button boolean|nil Disables button functionality.
---@field progressBarFetchValueLambda function|nil Function to get the progress bar's current value.
---@field progressBar boolean|nil If this element is a progress bar.
---@field progressBarEmptyColor string|nil Color of the empty part of the progress bar.
---@field progressBarFullColor string|nil Color of the filled part of the progress bar.
---@field progressBarMaxValue number|nil The maximum value of the progress bar.
---@field progressBarValueComponentName string|nil Component name to fetch progress value from.
---@field progressBarValueFieldName string|nil Field name to fetch progress value from.
---@field ui_object_updated boolean|nil Flag indicating the UI object was updated.
---@field buttonDelayStart boolean|nil Flag for button delay start.
---@field buttonDelay number|nil Delay for button actions.
---@field buttonDelayProgress number|nil Progress of the button delay.
---@field buttonDelayEnd boolean|nil Flag for button delay end.
---@field buttonClicked boolean|nil True if the button was clicked this frame.
---@field buttonDistance number|nil Distance for button press effect.
---@field tooltip string|nil Simple tooltip text.
---@field detailedTooltip Tooltip|nil A detailed tooltip object.
---@field onDemandTooltip function|nil A function that returns a tooltip.
---@field hover boolean|nil Flag indicating if the element is being hovered.
---@field force_focus boolean|nil Forces this element to take focus.
---@field dynamicMotion boolean|nil Enables dynamic motion effects.
---@field choice boolean|nil Marks this as a choice in a selection.
---@field chosen boolean|nil True if this choice is currently selected.
---@field one_press boolean|nil Button can only be pressed once.
---@field chosen_vert boolean|nil Indicates a vertical choice selection.
---@field draw_after boolean|nil Draw this element after its children.
---@field focusArgs FocusArgs|nil Arguments for focus behavior.
---@field updateFunc function|nil Custom update function.
---@field initFunc function|nil Custom initialization function.
---@field onUIResizeFunc function|nil Callback for when the UI is resized.
---@field onUIScalingResetToOne function|nil Callback for when UI scaling resets.
---@field instaFunc function|nil A function to be executed instantly.
---@field buttonCallback function|nil Callback for button presses.
---@field buttonTemp boolean|nil Temporary button flag.
---@field textGetter function|nil Function to dynamically get text content.
---@field ref_entity Entity|nil A referenced entity.
---@field ref_component string|nil Name of a referenced component.
---@field ref_value any|nil A referenced value.
---@field prev_ref_value any|nil The previous referenced value.
---@field text string|nil Static text content.
---@field language string|nil Language key for localization.
---@field verticalText boolean|nil If true, text is rendered vertically.
---@field hPopup boolean|nil Is a horizontal popup.
---@field dPopup boolean|nil Is a detailed popup.
---@field hPopupConfig UIConfig|nil Configuration for the horizontal popup.
---@field dPopupConfig UIConfig|nil Configuration for the detailed popup.
---@field extend_up boolean|nil If the element extends upwards.
---@field resolution Vector2|nil Resolution context for this element.
---@field emboss boolean|nil Apply an emboss effect.
---@field line_emboss boolean|nil Apply a line emboss effect.
---@field mid boolean|nil A miscellaneous flag.
---@field noRole boolean|nil This element has no inherited properties role.
---@field role InheritedProperties|nil The inherited properties role.

UIConfig = {}


---
--- A fluent builder for creating UIConfig components.
---
---@class UIConfigBuilder
local UIConfigBuilder = {
}

---
--- Creates a new builder instance with an ID.
---
---@param id string
---@return self
function UIConfigBuilder.create(...) end

---
--- Sets the ID.
---
---@param id string
---@return self
function UIConfigBuilder:addId(...) end

---
--- Sets a function to dynamically retrieve text.
---
---@param func function
---@return self
function UIConfigBuilder:addTextGetter(...) end

---
--- Sets the instance type.
---
---@param type string
---@return self
function UIConfigBuilder:addInstanceType(...) end

---
--- Sets the UI type.
---
---@param type UITypeEnum
---@return self
function UIConfigBuilder:addUiType(...) end

---
--- Sets the drawing layer.
---
---@param layer string
---@return self
function UIConfigBuilder:addDrawLayer(...) end

---
--- Sets the focus group.
---
---@param group string
---@return self
function UIConfigBuilder:addGroup(...) end

---
--- Sets the location bond.
---
---@param bond InheritedPropertiesSync
---@return self
function UIConfigBuilder:addLocationBond(...) end

---
--- Sets the rotation bond.
---
---@param bond InheritedPropertiesSync
---@return self
function UIConfigBuilder:addRotationBond(...) end

---
--- Sets the size bond.
---
---@param bond InheritedPropertiesSync
---@return self
function UIConfigBuilder:addSizeBond(...) end

---
--- Sets the scale bond.
---
---@param bond InheritedPropertiesSync
---@return self
function UIConfigBuilder:addScaleBond(...) end

---
--- Sets the transform offset.
---
---@param offset Vector2
---@return self
function UIConfigBuilder:addOffset(...) end

---
--- Sets the scale.
---
---@param scale number
---@return self
function UIConfigBuilder:addScale(...) end

---
--- Sets text character spacing.
---
---@param spacing number
---@return self
function UIConfigBuilder:addTextSpacing(...) end

---
--- Sets if focus is tied to the game object.
---
---@param focus boolean
---@return self
function UIConfigBuilder:addFocusWithObject(...) end

---
--- Sets if movement should be refreshed.
---
---@param refresh boolean
---@return self
function UIConfigBuilder:addRefreshMovement(...) end

---
--- Prevents movement while dragged.
---
---@param noMove boolean
---@return self
function UIConfigBuilder:addNoMovementWhenDragged(...) end

---
--- Prevents transform recalculation.
---
---@param noRecalc boolean
---@return self
function UIConfigBuilder:addNoRecalc(...) end

---
--- Alias for addNoRecalc.
---
---@param nonRecalc boolean
---@return self
function UIConfigBuilder:addNonRecalc(...) end

---
--- Enables dynamic (springy) movement.
---
---@param dynamic boolean
---@return self
function UIConfigBuilder:addMakeMovementDynamic(...) end

---
--- Sets the master UI element by ID.
---
---@param id string
---@return self
function UIConfigBuilder:addMaster(...) end

---
--- Sets the parent UI element by ID.
---
---@param id string
---@return self
function UIConfigBuilder:addParent(...) end

---
--- Attaches a game object.
---
---@param entity Entity
---@return self
function UIConfigBuilder:addObject(...) end

---
--- Sets the alignment flags.
---
---@param flags integer
---@return self
function UIConfigBuilder:addAlign(...) end

---
--- Sets the width.
---
---@param width number
---@return self
function UIConfigBuilder:addWidth(...) end

---
--- Sets the height.
---
---@param height number
---@return self
function UIConfigBuilder:addHeight(...) end

---
--- Sets the max width.
---
---@param maxWidth number
---@return self
function UIConfigBuilder:addMaxWidth(...) end

---
--- Sets the max height.
---
---@param maxHeight number
---@return self
function UIConfigBuilder:addMaxHeight(...) end

---
--- Sets the min width.
---
---@param minWidth number
---@return self
function UIConfigBuilder:addMinWidth(...) end

---
--- Sets the min height.
---
---@param minHeight number
---@return self
function UIConfigBuilder:addMinHeight(...) end

---
--- Sets the padding.
---
---@param padding number
---@return self
function UIConfigBuilder:addPadding(...) end

---
--- Sets the background color.
---
---@param color string
---@return self
function UIConfigBuilder:addColor(...) end

---
--- Sets the outline color.
---
---@param color string
---@return self
function UIConfigBuilder:addOutlineColor(...) end

---
--- Sets the outline thickness.
---
---@param thickness number
---@return self
function UIConfigBuilder:addOutlineThickness(...) end

---
--- Adds a shadow with an offset.
---
---@param offset Vector2
---@return self
function UIConfigBuilder:addShadow(...) end

---
--- Sets the shadow color.
---
---@param color string
---@return self
function UIConfigBuilder:addShadowColor(...) end

---
--- Sets if the background should be transparent.
---
---@param noFill boolean
---@return self
function UIConfigBuilder:addNoFill(...) end

---
--- Sets if the rectangle should be drawn pixel-perfect.
---
---@param pixelated boolean
---@return self
function UIConfigBuilder:addPixelatedRectangle(...) end

---
--- Sets if collision is enabled.
---
---@param canCollide boolean
---@return self
function UIConfigBuilder:addCanCollide(...) end

---
--- Alias for addCanCollide.
---
---@param collideable boolean
---@return self
function UIConfigBuilder:addCollideable(...) end

---
--- Forces collision checks.
---
---@param force boolean
---@return self
function UIConfigBuilder:addForceCollision(...) end

---
--- Marks this element as a button.
---
---@param isButton boolean
---@return self
function UIConfigBuilder:addButtonUIE(...) end

---
--- Disables the button functionality.
---
---@param disabled boolean
---@return self
function UIConfigBuilder:addDisableButton(...) end

---
--- Sets a function to get progress bar value.
---
---@param func function
---@return self
function UIConfigBuilder:addProgressBarFetchValueLamnda(...) end

---
--- Marks this as a progress bar.
---
---@param isProgressBar boolean
---@return self
function UIConfigBuilder:addProgressBar(...) end

---
--- Sets the progress bar's empty color.
---
---@param color string
---@return self
function UIConfigBuilder:addProgressBarEmptyColor(...) end

---
--- Sets the progress bar's full color.
---
---@param color string
---@return self
function UIConfigBuilder:addProgressBarFullColor(...) end

---
--- Sets the progress bar's max value.
---
---@param maxVal number
---@return self
function UIConfigBuilder:addProgressBarMaxValue(...) end

---
--- Sets the component name for progress value.
---
---@param name string
---@return self
function UIConfigBuilder:addProgressBarValueComponentName(...) end

---
--- Sets the field name for progress value.
---
---@param name string
---@return self
function UIConfigBuilder:addProgressBarValueFieldName(...) end

---
--- Sets the UI object updated flag.
---
---@param updated boolean
---@return self
function UIConfigBuilder:addUIObjectUpdated(...) end

---
--- Sets button delay start flag.
---
---@param delay boolean
---@return self
function UIConfigBuilder:addButtonDelayStart(...) end

---
--- Sets button press delay.
---
---@param delay number
---@return self
function UIConfigBuilder:addButtonDelay(...) end

---
--- Sets button delay progress.
---
---@param progress number
---@return self
function UIConfigBuilder:addButtonDelayProgress(...) end

---
--- Sets button delay end flag.
---
---@param ended boolean
---@return self
function UIConfigBuilder:addButtonDelayEnd(...) end

---
--- Sets the button clicked flag.
---
---@param clicked boolean
---@return self
function UIConfigBuilder:addButtonClicked(...) end

---
--- Sets button press visual distance.
---
---@param distance number
---@return self
function UIConfigBuilder:addButtonDistance(...) end

---
--- Sets the tooltip text.
---
---@param text string
---@return self
function UIConfigBuilder:addTooltip(...) end

---
--- Sets a detailed tooltip.
---
---@param tooltip Tooltip
---@return self
function UIConfigBuilder:addDetailedTooltip(...) end

---
--- Sets a function to generate a tooltip.
---
---@param func function
---@return self
function UIConfigBuilder:addOnDemandTooltip(...) end

---
--- Sets the hover state.
---
---@param hover boolean
---@return self
function UIConfigBuilder:addHover(...) end

---
--- Forces this element to take focus.
---
---@param force boolean
---@return self
function UIConfigBuilder:addForceFocus(...) end

---
--- Enables dynamic motion.
---
---@param dynamic boolean
---@return self
function UIConfigBuilder:addDynamicMotion(...) end

---
--- Marks this as a choice element.
---
---@param isChoice boolean
---@return self
function UIConfigBuilder:addChoice(...) end

---
--- Sets the chosen state.
---
---@param isChosen boolean
---@return self
function UIConfigBuilder:addChosen(...) end

---
--- Makes the button a one-time press.
---
---@param onePress boolean
---@return self
function UIConfigBuilder:addOnePress(...) end

---
--- Sets if choice navigation is vertical.
---
---@param isVert boolean
---@return self
function UIConfigBuilder:addChosenVert(...) end

---
--- Draws this element after its children.
---
---@param drawAfter boolean
---@return self
function UIConfigBuilder:addDrawAfter(...) end

---
--- Sets the focus arguments.
---
---@param args FocusArgs
---@return self
function UIConfigBuilder:addFocusArgs(...) end

---
--- Sets a custom update function.
---
---@param func function
---@return self
function UIConfigBuilder:addUpdateFunc(...) end

---
--- Sets a custom init function.
---
---@param func function
---@return self
function UIConfigBuilder:addInitFunc(...) end

---
--- Sets a resize callback.
---
---@param func function
---@return self
function UIConfigBuilder:addOnUIResizeFunc(...) end

---
--- Sets a scale reset callback.
---
---@param func function
---@return self
function UIConfigBuilder:addOnUIScalingResetToOne(...) end

---
--- Sets an instant-execution function.
---
---@param func function
---@return self
function UIConfigBuilder:addInstaFunc(...) end

---
--- Sets a button press callback.
---
---@param func function
---@return self
function UIConfigBuilder:addButtonCallback(...) end

---
--- Sets a temporary button flag.
---
---@param temp boolean
---@return self
function UIConfigBuilder:addButtonTemp(...) end

---
--- Sets a referenced entity.
---
---@param entity Entity
---@return self
function UIConfigBuilder:addRefEntity(...) end

---
--- Sets a referenced component name.
---
---@param name string
---@return self
function UIConfigBuilder:addRefComponent(...) end

---
--- Sets a referenced value.
---
---@param val any
---@return self
function UIConfigBuilder:addRefValue(...) end

---
--- Sets the previous referenced value.
---
---@param val any
---@return self
function UIConfigBuilder:addPrevRefValue(...) end

---
--- Sets the static text.
---
---@param text string
---@return self
function UIConfigBuilder:addText(...) end

---
--- Sets the language key.
---
---@param lang string
---@return self
function UIConfigBuilder:addLanguage(...) end

---
--- Enables vertical text.
---
---@param vertical boolean
---@return self
function UIConfigBuilder:addVerticalText(...) end

---
--- Marks as a horizontal popup.
---
---@param isPopup boolean
---@return self
function UIConfigBuilder:addHPopup(...) end

---
--- Sets the horizontal popup config.
---
---@param config UIConfig
---@return self
function UIConfigBuilder:addHPopupConfig(...) end

---
--- Marks as a detailed popup.
---
---@param isPopup boolean
---@return self
function UIConfigBuilder:addDPopup(...) end

---
--- Sets the detailed popup config.
---
---@param config UIConfig
---@return self
function UIConfigBuilder:addDPopupConfig(...) end

---
--- Sets if the element extends upwards.
---
---@param extendUp boolean
---@return self
function UIConfigBuilder:addExtendUp(...) end

---
--- Sets the resolution context.
---
---@param res Vector2
---@return self
function UIConfigBuilder:addResolution(...) end

---
--- Enables emboss effect.
---
---@param emboss boolean
---@return self
function UIConfigBuilder:addEmboss(...) end

---
--- Enables line emboss effect.
---
---@param emboss boolean
---@return self
function UIConfigBuilder:addLineEmboss(...) end

---
--- Sets the 'mid' flag.
---
---@param mid boolean
---@return self
function UIConfigBuilder:addMid(...) end

---
--- Disables the inherited properties role.
---
---@param noRole boolean
---@return self
function UIConfigBuilder:addNoRole(...) end

---
--- Sets the inherited properties role.
---
---@param role InheritedProperties
---@return self
function UIConfigBuilder:addRole(...) end

---
--- Sets the styling type.
---
---@param type UIStylingType
---@return self
function UIConfigBuilder:addStylingType(...) end

---
--- Sets the 9-patch info.
---
---@param info NPatchInfo
---@return self
function UIConfigBuilder:addNPatchInfo(...) end

---
--- Sets the 9-patch texture.
---
---@param texture string
---@return self
function UIConfigBuilder:addNPatchSourceTexture(...) end

---
--- Constructs the final UIConfig object.
---
---@return UIConfig
function UIConfigBuilder:build(...) end


---
--- A node in a UI template, defining an element's type, config, and children.
---
---@class UIElementTemplateNode
---@field type UITypeEnum
---@field config UIConfig
---@field children table<integer, UIElementTemplateNode>

UIElementTemplateNode = {}


---
--- A fluent builder for creating UI template trees.
---
---@class UIElementTemplateNodeBuilder
local UIElementTemplateNodeBuilder = {
}

---
--- Creates a new builder instance.
---
---@return self
function UIElementTemplateNodeBuilder.create(...) end

---
--- Sets the node's UI type.
---
---@param type UITypeEnum
---@return self
function UIElementTemplateNodeBuilder:addType(...) end

---
--- Sets the node's config.
---
---@param config UIConfig
---@return self
function UIElementTemplateNodeBuilder:addConfig(...) end

---
--- Adds a child template node.
---
---@param child UIElementTemplateNode
---@return self
function UIElementTemplateNodeBuilder:addChild(...) end

---
--- Builds the final template node.
---
---@return UIElementTemplateNode
function UIElementTemplateNodeBuilder:build(...) end


---
--- Top-level namespace for the UI system.
---
---@class ui
local ui = {
}


---
--- Functions for creating and managing UI elements.
---
---@class ui.element
ui.element = {
}


---
--- Functions for managing and laying out entire UI trees (boxes).
---
---@class ui.box
ui.box = {
}

---
--- Adds a pre-built event to the queue.
---
---@param event EventQueueSystem.Event
---@param queue? string # Optional: The name of the queue to add to (defaults to 'base').
---@param front? boolean # Optional: If true, adds the event to the front of the queue.
---@return nil
function EventQueueSystem.add_event(...) end

---
--- Finds an active event by its tag.
---
---@param tag string # The tag of the event to find.
---@param queue? string # Optional: The specific queue to search in. Searches all if omitted.
---@return EventQueueSystem.Event|nil
function EventQueueSystem.get_event_by_tag(...) end

---
--- Removes all events from one or all queues.
---
---@param queue? string # Optional: The queue to clear. Clears all if omitted.
---@return nil
function EventQueueSystem.clear_queue(...) end

---
--- Updates the event queue, processing active events.
---
---@param forced? boolean # Optional: If true, forces an update step.
---@return nil
function EventQueueSystem.update(...) end

---
--- Adjusts text alignment based on calculated line widths.
---
---@param textEntity Entity # The text entity to adjust.
---@return nil
function TextSystem.Functions.adjustAlignment(...) end

---
--- Splits a combined effect string into segments.
---
---@param effects string # The combined effect string (e.g., '{shake}{color=red}').
---@return table # A structured table of parsed effect arguments.
function TextSystem.Functions.splitEffects(...) end

---
--- Creates a new text entity in the world.
---
---@param text TextSystem.Text # The text configuration object.
---@param x number # The initial x-position.
---@param y number # The initial y-position.
---@return Entity
function TextSystem.Functions.createTextEntity(...) end

---
--- Calculates the text's bounding box.
---
---@param textEntity Entity # The text entity to measure.
---@return Vector2 # The calculated bounding box (width, height).
function TextSystem.Functions.calculateBoundingBox(...) end

---
--- Converts a codepoint to a UTF-8 string.
---
---@param codepoint integer # The Unicode codepoint.
---@return string
function TextSystem.Functions.CodepointToString(...) end

---
--- Parses the raw string of a text entity into characters and applies effects.
---
---@param textEntity Entity # The entity whose text component should be parsed.
---@return nil
function TextSystem.Functions.parseText(...) end

---
--- Handles a single effect segment during parsing.
---
---@param e Entity
---@param lineWidths table
---@param cx? any
---@param cy? any
---@return nil
function TextSystem.Functions.handleEffectSegment(...) end

---
--- Updates text state (e.g., for animated effects).
---
---@param textEntity Entity
---@param dt number # Delta time.
---@return nil
function TextSystem.Functions.updateText(...) end

---
--- Renders text to the screen.
---
---@param textEntity Entity # The text entity to render.
---@param layerPtr Layer # The rendering layer.
---@param debug? boolean # Optionally draw debug info.
---@return nil
function TextSystem.Functions.renderText(...) end

---
--- Clears all effects on a text entity.
---
---@param textEntity Entity
---@return nil
function TextSystem.Functions.clearAllEffects(...) end

---
--- Applies global effects to text.
---
---@param textEntity Entity
---@param effectString string # The effect string to apply to all characters.
---@return nil
function TextSystem.Functions.applyGlobalEffects(...) end

---
--- Prints internal debug info for a text entity.
---
---@param textEntity Entity
---@return nil
function TextSystem.Functions.debugPrintText(...) end

---
--- Resizes text to fit its container.
---
---@param textEntity Entity
---@param targetWidth number
---@param targetHeight number
---@param centerLaterally? boolean
---@param centerVertically? boolean
---@return nil
function TextSystem.Functions.resizeTextToFit(...) end

---
--- Sets text scale and recenters its origin.
---
---@param textEntity Entity
---@param renderScale number
---@param targetWidth number
---@param targetHeight number
---@param centerLaterally boolean
---@param centerVertically boolean
---@return nil
function TextSystem.Functions.setTextScaleAndRecenter(...) end

---
--- Resets text scale and layout to its original parsed state.
---
---@param textEntity Entity
---@return nil
function TextSystem.Functions.resetTextScaleAndLayout(...) end

---
--- Updates the raw text string and reparses the entity.
---
---@param textEntity Entity # The entity to modify.
---@param newText string # The new raw text string.
---@return nil
function TextSystem.Functions.setText(...) end

---
--- Advances all animations by dt
---
---@param dt number # Delta time in seconds
---@return nil
function animation_system.update(...) end

---
--- Returns nine-patch border info and texture
---
---@param uuid_or_raw_identifier string # N-patch identifier or raw key
---@return NPatchInfo info # Border slicing information
---@return Texture2D texture # Associated texture
function animation_system.getNinepatchUIBorderInfo(...) end

---
--- Creates an animated object with a transform
---
---@param defaultAnimationIDOrSpriteUUID string # Animation ID or sprite UUID
---@param generateNewAnimFromSprite boolean? # Create a new anim from sprite? Default false
---@param x number? # Initial X position. Default 0
---@param y number? # Initial Y position. Default 0
---@param shaderPassConfigFunc fun(entt_entity: entt.entity)? # Optional shader setup callback
---@param shadowEnabled boolean? # Enable shadow? Default true
---@return entt.entity entity # Created animation entity
function animation_system.createAnimatedObjectWithTransform(...) end

---
--- Creates a still animation from a sprite UUID
---
---@param spriteUUID string # Sprite UUID to use
---@param fg Color? # Optional foreground tint
---@param bg Color? # Optional background tint
---@return AnimationObject animObj # New still animation object
function animation_system.createStillAnimationFromSpriteUUID(...) end

---
--- Resizes all animation objects in an entity to fit
---
---@param e entt.entity # Target entity
---@param targetWidth number # Desired width
---@param targetHeight number # Desired height
---@return nil
function animation_system.resizeAnimationObjectsInEntityToFit(...) end

---
--- Resizes and centers all animation objects in an entity
---
---@param e entt.entity # Target entity
---@param targetWidth number # Desired width
---@param targetHeight number # Desired height
---@param centerLaterally boolean? # Center horizontally? Default true
---@param centerVertically boolean? # Center vertically? Default true
---@return nil
function animation_system.resizeAnimationObjectsInEntityToFitAndCenterUI(...) end

---
--- Resets UI render scale for an entity’s animations
---
---@param e entt.entity # Target entity
---@return nil
function animation_system.resetAnimationUIRenderScale(...) end

---
--- Resizes a single animation object to fit
---
---@param animObj AnimationObject # Animation object reference
---@param targetWidth number # Desired width
---@param targetHeight number # Desired height
---@return nil
function animation_system.resizeAnimationObjectToFit(...) end

---
--- Sorts all layers by their Z-index.
---
---@return nil
function layer.SortLayers(...) end

---
--- Updates the Z-index of a layer and resorts the layer list.
---
---@param layer layer.Layer
---@param newZIndex integer
---@return nil
function layer.UpdateLayerZIndex(...) end

---
--- Creates a new layer with a default-sized main canvas and returns it.
---
---@return layer.Layer
function layer.CreateLayer(...) end

---
--- Creates a layer with a main canvas of a specified size.
---
---@param width integer
---@param height integer
---@return layer.Layer
function layer.CreateLayerWithSize(...) end

---
--- Removes a layer and unloads its canvases.
---
---@param layer layer.Layer
---@return nil
function layer.RemoveLayerFromCanvas(...) end

---
--- Resizes a specific canvas within a layer.
---
---@param layer layer.Layer
---@param canvasName string
---@param newWidth integer
---@param newHeight integer
---@return nil
function layer.ResizeCanvasInLayer(...) end

---
--- Adds a canvas to the layer, matching the layer's default size.
---
---@param layer layer.Layer
---@param canvasName string
---@return nil
function layer.AddCanvasToLayer(...) end

---
--- Adds a canvas of a specific size to the layer.
---
---@overload fun(layer: layer.Layer, canvasName: string, width: integer, height: integer):nil
function layer.AddCanvasToLayer(...) end

---
--- Removes a canvas by name from a specific layer.
---
---@param layer layer.Layer
---@param canvasName string
---@return nil
function layer.RemoveCanvas(...) end

---
--- Destroys all layers and their contents.
---
---@return nil
function layer.UnloadAllLayers(...) end

---
--- Clears draw commands for a specific layer.
---
---@param layer layer.Layer
---@return nil
function layer.ClearDrawCommands(...) end

---
--- Clears all draw commands from all layers.
---
---@return nil
function layer.ClearAllDrawCommands(...) end

---
--- Begins drawing to all canvases. (Calls BeginTextureMode on all).
---
---@return nil
function layer.Begin(...) end

---
--- Ends drawing to all canvases. (Calls EndTextureMode on all).
---
---@return nil
function layer.End(...) end

---
--- Renders all layers to the current render target.
---
---@param camera? Camera2D # Optional camera for rendering.
---@return nil
function layer.RenderAllLayersToCurrentRenderTarget(...) end

---
--- Draws a layer's queued commands to a specific canvas within that layer.
---
---@param layer layer.Layer
---@param canvasName string
---@param camera Camera2D # The camera to use for rendering.
---@return nil
function layer.DrawLayerCommandsToSpecificCanvas(...) end

---
--- Draws a canvas to the current render target with transform, color, and an optional shader.
---
---@param layer layer.Layer
---@param canvasName string
---@param x? number
---@param y? number
---@param rotation? number
---@param scaleX? number
---@param scaleY? number
---@param color? Color
---@param shader? Shader
---@param flat? boolean
---@return nil
function layer.DrawCanvasToCurrentRenderTargetWithTransform(...) end

---
--- Draws a canvas from one layer onto a canvas in another layer.
---
---@param sourceLayer layer.Layer
---@param sourceCanvasName string
---@param destLayer layer.Layer
---@param destCanvasName string
---@param x number
---@param y number
---@param rotation number
---@param scaleX number
---@param scaleY number
---@param tint Color
---@return nil
function layer.DrawCanvasOntoOtherLayer(...) end

---
--- Draws a canvas from one layer onto another with a shader.
---
---@param sourceLayer layer.Layer
---@param sourceCanvasName string
---@param destLayer layer.Layer
---@param destCanvasName string
---@param x number
---@param y number
---@param rotation number
---@param scaleX number
---@param scaleY number
---@param tint Color
---@param shader Shader
---@return nil
function layer.DrawCanvasOntoOtherLayerWithShader(...) end

---
--- Draws a canvas to the current render target, fitting it to a destination rectangle.
---
---@param layer layer.Layer
---@param canvasName string
---@param destRect Rectangle
---@param color Color
---@param shader Shader
---@return nil
function layer.DrawCanvasToCurrentRenderTargetWithDestRect(...) end

---
--- Executes a custom drawing function that renders to a specific canvas.
---
---@param layer layer.Layer
---@param canvasName? string
---@param drawActions fun():void
---@return nil
function layer.DrawCustomLamdaToSpecificCanvas(...) end

---
--- Draws an entity with a Transform and Animation component directly.
---
---@param registry Registry
---@param entity Entity
---@return nil
function layer.DrawTransformEntityWithAnimation(...) end

---
--- Draws an entity with a Transform and Animation component using the rendering pipeline.
---
---@param registry Registry
---@param entity Entity
---@return nil
function layer.DrawTransformEntityWithAnimationWithPipeline(...) end

---
--- Queues a CmdBeginDrawing into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdBeginDrawing) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueBeginDrawing(...) end

---
--- Queues a CmdEndDrawing into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdEndDrawing) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueEndDrawing(...) end

---
--- Queues a CmdClearBackground into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdClearBackground) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueClearBackground(...) end

---
--- Queues a CmdTranslate into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdTranslate) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueTranslate(...) end

---
--- Queues a CmdScale into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdScale) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueScale(...) end

---
--- Queues a CmdRotate into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdRotate) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueRotate(...) end

---
--- Queues a CmdAddPush into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdAddPush) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueAddPush(...) end

---
--- Queues a CmdAddPop into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdAddPop) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueAddPop(...) end

---
--- Queues a CmdPushMatrix into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdPushMatrix) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queuePushMatrix(...) end

---
--- Queues a CmdPopMatrix into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdPopMatrix) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queuePopMatrix(...) end

---
--- Queues a CmdDrawCircle into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawCircle) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawCircle(...) end

---
--- Queues a CmdDrawRectangle into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawRectangle) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawRectangle(...) end

---
--- Queues a CmdDrawRectanglePro into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawRectanglePro) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawRectanglePro(...) end

---
--- Queues a CmdDrawRectangleLinesPro into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawRectangleLinesPro) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawRectangleLinesPro(...) end

---
--- Queues a CmdDrawLine into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawLine) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawLine(...) end

---
--- Queues a CmdDrawDashedLine into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawDashedLine) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawDashedLine(...) end

---
--- Queues a CmdDrawText into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawText) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawText(...) end

---
--- Queues a CmdDrawTextCentered into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawTextCentered) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawTextCentered(...) end

---
--- Queues a CmdTextPro into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdTextPro) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueTextPro(...) end

---
--- Queues a CmdDrawImage into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawImage) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawImage(...) end

---
--- Queues a CmdTexturePro into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdTexturePro) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueTexturePro(...) end

---
--- Queues a CmdDrawEntityAnimation into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawEntityAnimation) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawEntityAnimation(...) end

---
--- Queues a CmdDrawTransformEntityAnimation into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawTransformEntityAnimation) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawTransformEntityAnimation(...) end

---
--- Queues a CmdDrawTransformEntityAnimationPipeline into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawTransformEntityAnimationPipeline) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawTransformEntityAnimationPipeline(...) end

---
--- Queues a CmdSetShader into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSetShader) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSetShader(...) end

---
--- Queues a CmdResetShader into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdResetShader) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueResetShader(...) end

---
--- Queues a CmdSetBlendMode into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSetBlendMode) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSetBlendMode(...) end

---
--- Queues a CmdUnsetBlendMode into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdUnsetBlendMode) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueUnsetBlendMode(...) end

---
--- Queues a CmdSendUniformFloat into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformFloat) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformFloat(...) end

---
--- Queues a CmdSendUniformInt into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformInt) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformInt(...) end

---
--- Queues a CmdSendUniformVec2 into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformVec2) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformVec2(...) end

---
--- Queues a CmdSendUniformVec3 into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformVec3) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformVec3(...) end

---
--- Queues a CmdSendUniformVec4 into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformVec4) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformVec4(...) end

---
--- Queues a CmdSendUniformFloatArray into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformFloatArray) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformFloatArray(...) end

---
--- Queues a CmdSendUniformIntArray into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSendUniformIntArray) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSendUniformIntArray(...) end

---
--- Queues a CmdVertex into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdVertex) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueVertex(...) end

---
--- Queues a CmdBeginOpenGLMode into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdBeginOpenGLMode) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueBeginOpenGLMode(...) end

---
--- Queues a CmdEndOpenGLMode into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdEndOpenGLMode) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueEndOpenGLMode(...) end

---
--- Queues a CmdSetColor into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSetColor) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSetColor(...) end

---
--- Queues a CmdSetLineWidth into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSetLineWidth) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSetLineWidth(...) end

---
--- Queues a CmdSetTexture into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdSetTexture) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueSetTexture(...) end

---
--- Queues a CmdRenderRectVerticesFilledLayer into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdRenderRectVerticesFilledLayer) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueRenderRectVerticesFilledLayer(...) end

---
--- Queues a CmdRenderRectVerticesOutlineLayer into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdRenderRectVerticesOutlineLayer) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueRenderRectVerticesOutlineLayer(...) end

---
--- Queues a CmdDrawPolygon into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawPolygon) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawPolygon(...) end

---
--- Queues a CmdRenderNPatchRect into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdRenderNPatchRect) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueRenderNPatchRect(...) end

---
--- Queues a CmdDrawTriangle into the layer draw list. Executes init_fn with a command instance and inserts it at the specified z-order.
---
---@param layer Layer # Target layer to queue into
        ---@param init_fn fun(c: layer.CmdDrawTriangle) # Function to initialize the command
        ---@param z number # Z-order depth to queue at
        ---@return void
function layer.queueDrawTriangle(...) end

---
--- Loads a language file for the given language code from a specific path.
---
---@param languageCode string # The language to load (e.g., 'en_US').
---@param path string # The filepath to the language JSON file.
---@return nil
function localization.loadLanguage(...) end

---
--- Sets a fallback language if a key isn't found in the current one.
---
---@param languageCode string # The language code to use as a fallback (e.g., 'en_US').
---@return nil
function localization.setFallbackLanguage(...) end

---
--- Gets the localized string for a key, with optional fmt-style arguments.
---
---@param key string # The localization key.
---@param ... any # Optional arguments for formatting the string.
---@return string # The localized and formatted string.
function localization.get(...) end

---
--- Gets the raw string from the language file, using fallbacks if necessary.
---
---@param key string # The localization key.
---@return string # The raw, untransformed string or a '[MISSING: key]' message.
function localization.getRaw(...) end

---
--- Retrieves font data associated with the current language.
---
---@return FontData # A handle to the font data for the current language.
function localization.getFontData(...) end

---
--- Loads font data from the specified path.
---
---@param path string # The file path to the font data JSON.
---@return nil
function localization.loadFontData(...) end

---
--- Registers a callback that executes after the current language changes.
---
---@param callback fun(newLanguageCode: string) # A function to call when the language changes.
---@return nil
function localization.onLanguageChanged(...) end

---
--- Sets the current language and notifies all listeners.
---
---@param languageCode string # The language code to make active.
---@return boolean # True if the language was set successfully, false otherwise.
function localization.setCurrentLanguage(...) end

---
--- Creates and attaches a particle system to an entity using an emitter's properties.
---
---@param entity Entity # The entity to attach the particle system to.
---@param emitter ParticleEmitter # A pre-configured particle emitter data object.
---@return nil
function particle.CreateParticle(...) end

---
--- Emits a burst of particles from the specified emitter entity.
---
---@param emitterEntity Entity # The entity that has the particle emitter component.
---@param count integer # The number of particles to emit in a single burst.
---@return nil
function particle.EmitParticles(...) end

---
--- Creates and returns a new ParticleEmitter data object with default values.
---
---@return ParticleEmitter # A new ParticleEmitter data object.
function particle.CreateParticleEmitter(...) end

---
--- Updates all active particle systems.
---
---@param dt number # The delta time since the last frame.
---@return nil
function particle.UpdateParticles(...) end

---
--- Draws all active particles.
---
---@param layerPtr Layer # The layer to draw the particles on.
---@return nil
function particle.DrawParticles(...) end

---
--- Sets the seed for deterministic random behavior.
---
---@param seed integer # The seed for the random number generator.
---@return nil
function random_utils.set_seed(...) end

---
--- Returns a random boolean value, with an optional probability.
---
---@param chance? number # Optional: A percentage chance (0-100) for the result to be true. Defaults to 50.
---@return boolean
function random_utils.random_bool(...) end

---
--- Returns a random float between min and max.
---
---@param min? number # The minimum value (inclusive). Defaults to 0.0.
---@param max? number # The maximum value (inclusive). Defaults to 1.0.
---@return number
function random_utils.random_float(...) end

---
--- Returns a random integer within a range.
---
---@param min? integer # The minimum value (inclusive). Defaults to 0.
---@param max? integer # The maximum value (inclusive). Defaults to 1.
---@return integer
function random_utils.random_int(...) end

---
--- Returns a float sampled from a normal (Gaussian) distribution.
---
---@param mean number # The mean of the distribution.
---@param stdev number # The standard deviation of the distribution.
---@return number
function random_utils.random_normal(...) end

---
--- Returns +1 or -1 randomly, with an optional probability.
---
---@param chance? number # Optional: A percentage chance (0-100) for the result to be +1. Defaults to 50.
---@return integer # Either +1 or -1.
function random_utils.random_sign(...) end

---
--- Generates a random unique integer ID.
---
---@return integer # A random unique integer ID.
function random_utils.random_uid(...) end

---
--- Returns a random angle in radians.
---
---@return number # A random angle in radians (0 to 2*pi).
function random_utils.random_angle(...) end

---
--- Returns a biased random float between 0 and 1.
---
---@param biasFactor number # A factor to skew the result. <1.0 favors higher values, >1.0 favors lower values.
---@return number
function random_utils.random_biased(...) end

---
--- Returns a random delay in milliseconds.
---
---@param minMs integer # The minimum delay in milliseconds.
---@param maxMs integer # The maximum delay in milliseconds.
---@return number
function random_utils.random_delay(...) end

---
--- Returns a random, normalized 2D vector.
---
---@return Vector2
function random_utils.random_unit_vector_2D(...) end

---
--- Returns a random, normalized 3D vector.
---
---@return Vector3
function random_utils.random_unit_vector_3D(...) end

---
--- Returns a randomly generated color.
---
---@return Color
function random_utils.random_color(...) end

---
--- Selects a random element from a table of integers.
---
---@param items integer[] # A table of integers.
---@return integer
function random_utils.random_element_int(...) end

---
--- Selects a random element from a table of numbers.
---
---@param items number[] # A table of numbers.
---@return number
function random_utils.random_element_double(...) end

---
--- Selects a random element from a table of strings.
---
---@param items string[] # A table of strings.
---@return string
function random_utils.random_element_string(...) end

---
--- Selects a random element from a table of Colors.
---
---@param items Color[] # A table of Colors.
---@return Color
function random_utils.random_element_color(...) end

---
--- Selects a random element from a table of Vector2s.
---
---@param items Vector2[] # A table of Vector2s.
---@return Vector2
function random_utils.random_element_vec2(...) end

---
--- Selects a random element from a table of Entities.
---
---@param items Entity[] # A table of Entities.
---@return Entity
function random_utils.random_element_entity(...) end

---
--- Selects, removes, and returns a random element from a table of integers.
---
---@param items integer[] # The table to modify.
---@return integer
function random_utils.random_element_remove_int(...) end

---
--- Selects, removes, and returns a random element from a table of numbers.
---
---@param items number[] # The table to modify.
---@return number
function random_utils.random_element_remove_double(...) end

---
--- Selects, removes, and returns a random element from a table of strings.
---
---@param items string[] # The table to modify.
---@return string
function random_utils.random_element_remove_string(...) end

---
--- Selects, removes, and returns a random element from a table of Colors.
---
---@param items Color[] # The table to modify.
---@return Color
function random_utils.random_element_remove_color(...) end

---
--- Selects, removes, and returns a random element from a table of Vector2s.
---
---@param items Vector2[] # The table to modify.
---@return Vector2
function random_utils.random_element_remove_vec2(...) end

---
--- Selects, removes, and returns a random element from a table of Entities.
---
---@param items Entity[] # The table to modify.
---@return Entity
function random_utils.random_element_remove_entity(...) end

---
--- Performs a weighted random pick and returns the chosen index.
---
---@param weights number[] # A table of weights.
---@return integer # A 1-based index corresponding to the chosen weight.
function random_utils.random_weighted_pick_int(...) end

---
--- Performs a weighted random pick from a table of strings.
---
---@param values string[] # A table of string values.
---@param weights number[] # A table of corresponding weights.
---@return string
function random_utils.random_weighted_pick_string(...) end

---
--- Performs a weighted random pick from a table of Colors.
---
---@param values Color[] # A table of Color values.
---@param weights number[] # A table of corresponding weights.
---@return Color
function random_utils.random_weighted_pick_color(...) end

---
--- Performs a weighted random pick from a table of Vector2s.
---
---@param values Vector2[] # A table of Vector2 values.
---@param weights number[] # A table of corresponding weights.
---@return Vector2
function random_utils.random_weighted_pick_vec2(...) end

---
--- Performs a weighted random pick from a table of Entities.
---
---@param values Entity[] # A table of Entity values.
---@param weights number[] # A table of corresponding weights.
---@return Entity
function random_utils.random_weighted_pick_entity(...) end

---
--- Applies a set of uniforms to a specific shader instance.
---
---@param shader Shader
---@param uniforms shaders.ShaderUniformSet # A table of uniform names to values.
---@return nil
function shaders.ApplyUniformsToShader(...) end

---
--- Loads and compiles shaders from a JSON file.
---
---@param path string # Filepath to the JSON definition file.
---@return nil
function shaders.loadShadersFromJSON(...) end

---
--- Unloads all shaders, freeing their GPU resources.
---
---@return nil
function shaders.unloadShaders(...) end

---
--- Globally forces all shader effects off or on, overriding individual settings.
---
---@param disabled boolean # True to disable all shaders, false to re-enable them.
---@return nil
function shaders.disableAllShadersViaOverride(...) end

---
--- Checks all loaded shaders for changes on disk and reloads them if necessary.
---
---@return nil
function shaders.hotReloadShaders(...) end

---
--- Begins a full-screen shader mode, e.g., for post-processing effects.
---
---@param shaderName string # The name of the shader to begin as a full-screen effect.
---@return nil
function shaders.setShaderMode(...) end

---
--- Ends the current full-screen shader mode.
---
---@return nil
function shaders.unsetShaderMode(...) end

---
--- Retrieves a loaded shader by its unique name.
---
---@param name string # The unique name of the shader.
---@return Shader|nil # The shader object, or nil if not found.
function shaders.getShader(...) end

---
--- Registers a global callback to update a specific uniform's value across all shaders that use it.
---
---@param uniformName string # The uniform to target (e.g., 'time').
---@param callback fun():any # A function that returns the latest value for the uniform.
---@return nil
function shaders.registerUniformUpdate(...) end

---
--- Invokes all registered global uniform update callbacks immediately.
---
---@return nil
function shaders.updateAllShaderUniforms(...) end

---
--- Updates internal shader state, such as timers for built-in 'time' uniforms.
---
---@param dt number # Delta time since the last frame.
---@return nil
function shaders.updateShaders(...) end

---
--- Displays the ImGui-based shader editor window for real-time debugging and uniform tweaking.
---
---@return nil
function shaders.ShowShaderEditorUI(...) end

---
--- Cancels and destroys an active timer.
---
---@param timerHandle integer # The handle of the timer to cancel.
---@return nil
function timer.cancel(...) end

---
--- Gets the current invocation count for an 'every' timer.
---
---@param timerHandle integer # The handle of an 'every' timer.
---@return integer|nil # The current invocation count, or nil if not found.
function timer.get_every_index(...) end

---
--- Resets a timer's elapsed time, such as for a 'cooldown'.
---
---@param timerHandle integer # The handle of the timer to reset.
---@return nil
function timer.reset(...) end

---
--- Gets the configured delay time for a timer.
---
---@param timerHandle integer # The handle of the timer.
---@return number|nil # The timer's current delay, or nil if not found.
function timer.get_delay(...) end

---
--- Sets the global speed multiplier for all timers.
---
---@param multiplier number # The new global speed multiplier.
---@return nil
function timer.set_multiplier(...) end

---
--- Gets the global timer speed multiplier.
---
---@return number
function timer.get_multiplier(...) end

---
--- Gets the elapsed time for a 'for' timer.
---
---@param timerHandle integer # The handle of a 'for' timer.
---@return number|nil # The normalized elapsed time (0.0 to 1.0), or nil if not found.
function timer.get_for_elapsed(...) end

---
--- Returns the timer object's elapsed time and its configured delay.
---
---@param timerHandle integer # The handle of the timer.
---@return number, number # Returns two values: the elapsed time and the total delay. Returns a single nil if not found.
function timer.get_timer_and_delay(...) end

---
--- Updates all active timers, should be called once per frame.
---
---@param dt number # Delta time.
---@return nil
function timer.update(...) end

---
--- Creates a timer that runs an action once immediately.
---
---@param action fun()
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.run(...) end

---
--- Creates a timer that runs an action once after a delay.
---
---@param delay number|{number, number} # A fixed delay or a {min, max} range in seconds.
---@param action fun()
---@param tag? string
---@return integer # timerHandle
function timer.after(...) end

---
--- Creates a resettable timer that fires an action when a condition is met after a cooldown.
---
---@param delay number|{number, number} # Cooldown duration in seconds or a {min, max} range.
---@param condition fun():boolean # A function that must return true for the action to fire.
---@param action fun()
---@param times? integer # Number of times to run. 0 for infinite.
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.cooldown(...) end

---
--- Creates a timer that runs an action repeatedly at a given interval.
---
---@param interval number|{number, number} # Interval in seconds or a {min, max} range.
---@param action fun()
---@param times? integer # Number of times to run. 0 for infinite.
---@param immediate? boolean # If true, the action runs immediately on creation.
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.every(...) end

---
--- Creates a timer that runs for a set number of steps, interpolating the delay between a start and end value.
---
---@param start_delay number
---@param end_delay number
---@param times integer # Total number of steps.
---@param action fun()
---@param immediate? boolean
---@param step_method? fun(t:number):number # Easing function for delay interpolation.
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.every_step(...) end

---
--- Creates a timer that runs an action every frame for a set duration, passing delta time to the action.
---
---@param duration number|{number, number} # Total duration in seconds or a {min, max} range.
---@param action fun(dt:number)
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.for_time(...) end

---
--- Creates a timer that interpolates a value towards a target over a duration.
---
---@param duration number|{number, number} # Duration of the tween in seconds or a {min, max} range.
---@param getter fun():number # Function to get the current value.
---@param setter fun(value:number) # Function to set the new value.
---@param target_value number # The final value for the tween.
---@param easing_method? fun(t:number):number # Optional easing function (0.0-1.0).
---@param after? fun()
---@param tag? string
---@return integer # timerHandle
function timer.tween(...) end

---
--- Cancels and destroys an active timer.
---
---@param timerHandle integer # The handle of the timer to cancel.
---@return nil
function timer.cancel(...) end

---
--- Gets the current invocation count for an 'every' timer.
---
---@param timerHandle integer # The handle of an 'every' timer.
---@return integer|nil # The current invocation count, or nil if not found.
function timer.get_every_index(...) end

---
--- Resets a timer's elapsed time, such as for a 'cooldown'.
---
---@param timerHandle integer # The handle of the timer to reset.
---@return nil
function timer.reset(...) end

---
--- Gets the configured delay time for a timer.
---
---@param timerHandle integer # The handle of the timer.
---@return number|nil # The timer's current delay, or nil if not found.
function timer.get_delay(...) end

---
--- Sets the global speed multiplier for all timers.
---
---@param multiplier number # The new global speed multiplier.
---@return nil
function timer.set_multiplier(...) end

---
--- Gets the global timer speed multiplier.
---
---@return number
function timer.get_multiplier(...) end

---
--- Gets the elapsed time for a 'for' timer.
---
---@param timerHandle integer # The handle of a 'for' timer.
---@return number|nil # The normalized elapsed time (0.0 to 1.0), or nil if not found.
function timer.get_for_elapsed(...) end

---
--- Returns the timer object's elapsed time and its configured delay.
---
---@param timerHandle integer # The handle of the timer.
---@return number, number # Returns two values: the elapsed time and the total delay. Returns a single nil if not found.
function timer.get_timer_and_delay(...) end

---
--- Re-maps a number from one range to another.
---
---@param value number
---@param from1 number
---@param to1 number
---@param from2 number
---@param to2 number
---@return number
function timer.math.remap(...) end

---
--- Linearly interpolates between two points.
---
---@param a number
---@param b number
---@param t number
---@return number
function timer.math.lerp(...) end

---
--- Initializes the transform system.
---
---@return nil
function transform.InitializeSystem(...) end

---
--- Updates all transforms in the registry.
---
---@param registry registry
---@param dt number
---@return nil
function transform.UpdateAllTransforms(...) end

---
--- Creates or emplaces an entity with core components.
---
---@param registry registry
---@param container Entity
---@param x number
---@param y number
---@param w number
---@param h number
---@param entityToEmplaceTo? Entity
---@return Entity
function transform.CreateOrEmplace(...) end

---
--- Creates a root container entity for the game world.
---
---@param registry registry
---@param x number
---@param y number
---@param w number
---@param h number
---@return Entity
function transform.CreateGameWorldContainerEntity(...) end

---
--- Updates spring smoothing factors for a transform.
---
---@param registry registry
---@param e Entity
---@param dt number
---@return nil
function transform.UpdateTransformSmoothingFactors(...) end

---
--- Aligns an entity to its master.
---
---@param registry registry
---@param e Entity
---@param force? boolean
---@return nil
function transform.AlignToMaster(...) end

---
--- Updates an entity's position based on its master's movement.
---
---@param e Entity
---@param dt number
---@param selfTransform Transform
---@param selfRole InheritedProperties
---@param selfNode GameObject
---@return nil
function transform.MoveWithMaster(...) end

---
--- Gets the master components for a given entity.
---
---@param e Entity
---@param selfT Transform
---@param selfR InheritedProperties
---@param selfN GameObject
---@return MasterCache, Transform|nil, InheritedProperties|nil
function transform.GetMaster(...) end

---
--- Instantly snaps an entity's transform to its master's.
---
---@param e Entity
---@param parent Entity
---@param selfT Transform
---@param selfR InheritedProperties
---@param parentT Transform
---@param parentR InheritedProperties
---@return nil
function transform.SyncPerfectlyToMaster(...) end

---
--- Configures all alignment and bonding properties for an entity.
---
---@param registry registry
---@param e Entity
---@param isChild boolean
---@param parent? Entity
---@param xy? InheritedPropertiesSync
---@param wh? InheritedPropertiesSync
---@param rotation? InheritedPropertiesSync
---@param scale? InheritedPropertiesSync
---@param alignment? AlignmentFlag
---@param offset? Vector2
---@return nil
function transform.ConfigureAlignment(...) end

---
--- Draws debug visuals for a transform.
---
---@param registry registry
---@param e Entity
---@param layer Layer
---@return nil
function transform.DrawBoundingBoxAndDebugInfo(...) end

---
--- Finds the top-most interactable entity at a screen point.
---
---@param point Vector2
---@return Entity|nil
function transform.FindTopEntityAtPoint(...) end

---
--- Finds all interactable entities at a screen point.
---
---@param point Vector2
---@return Entity[]
function transform.FindAllEntitiesAtPoint(...) end

---
--- Removes an entity and its children from the game.
---
---@param registry registry
---@param e Entity
---@return nil
function transform.RemoveEntity(...) end

---
--- Configures a jiggle animation on hover.
---
---@param registry registry
---@param e Entity
---@param jiggleAmount number
---@return nil
function transform.setJiggleOnHover(...) end

---
--- Handles alignment for an entire UI tree.
---
---@param registry registry
---@param root Entity
---@return nil
function ui.box.handleAlignment(...) end

---
--- Builds a UI tree from a template definition.
---
---@param registry registry
---@param uiBoxEntity Entity
---@param uiElementDef UIElementTemplateNode
---@param uiElementParent Entity
---@return nil
function ui.box.BuildUIElementTree(...) end

---
--- Initializes a new UI box from a definition.
---
---@param registry registry
---@param transformData table
---@param definition UIElementTemplateNode
---@param config? UIConfig
---@return Entity
function ui.box.Initialize(...) end

---
--- Recursively places UI elements within a layout.
---
---@param registry registry
---@param uiElement Entity
---@param runningTransform table
---@param parentType UITypeEnum
---@param parent Entity
---@return nil
function ui.box.placeUIElementsRecursively(...) end

---
--- Places a single non-container element within its parent.
---
---@param role InheritedProperties
---@param runningTransform table
---@param uiElement Entity
---@param parentType UITypeEnum
---@param uiState UIState
---@param uiConfig UIConfig
---@return nil
function ui.box.placeNonContainerUIE(...) end

---
--- Clamps the calculated transform dimensions to the configured minimums.
---
---@param uiConfig UIConfig
---@param calcTransform table
---@return nil
function ui.box.ClampDimensionsToMinimumsIfPresent(...) end

---
--- Calculates the sizes for an entire UI tree.
---
---@param registry registry
---@param uiElement Entity
---@param parentUINodeRect table
---@param forceRecalculateLayout? boolean
---@param scale? number
---@return number, number
function ui.box.CalcTreeSizes(...) end

---
--- Calculates the size for a non-container sub-element.
---
---@param registry registry
---@param uiElement Entity
---@param parentUINodeRect table
---@param forceRecalculateLayout boolean
---@param scale? number
---@param calcCurrentNodeTransform table
---@return Vector2
function ui.box.TreeCalcSubNonContainer(...) end

---
--- Renews the alignment for an entity.
---
---@param registry registry
---@param self Entity
---@return nil
function ui.box.RenewAlignment(...) end

---
--- Calculates the size for a container sub-element.
---
---@param registry registry
---@param uiElement Entity
---@param parentUINodeRect table
---@param forceRecalculateLayout boolean
---@param scale? number
---@param calcCurrentNodeTransform table
---@param contentSizes table
---@return Vector2
function ui.box.TreeCalcSubContainer(...) end

---
--- Sub-routine for calculating a container's size based on its children.
---
---@param calcCurrentNodeTransform table
---@param parentUINodeRect table
---@param uiConfig UIConfig
---@param calcChildTransform table
---@param padding number
---@param node GameObject
---@param registry registry
---@param factor number
---@param contentSizes table
---@return nil
function ui.box.SubCalculateContainerSize(...) end

---
--- Gets a UI element by its ID, searching from a specific node.
---
---@param registry registry
---@param node Entity
---@param id string
---@return Entity|nil
function ui.box.GetUIEByID(...) end

---
--- Gets a UI element by its ID, searching globally.
---

        ---@param registry registry
        ---@param id string
        ---@return Entity|nil
        
function ui.box.GetUIEByID(...) end

---
--- Removes all UI elements belonging to a specific group.
---
---@param registry registry
---@param entity Entity
---@param group string
---@return boolean
function ui.box.RemoveGroup(...) end

---
--- Gets all UI elements belonging to a specific group.
---
---@param registry registry
---@param entity Entity
---@param group string
---@return Entity[]
function ui.box.GetGroup(...) end

---
--- Removes a UI box and all its elements.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.box.Remove(...) end

---
--- Forces a full recalculation of a UI box's layout.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.box.Recalculate(...) end

---
--- Assigns tree order components for collision and input processing.
---
---@param registry registry
---@param rootUIElement Entity
---@return nil
function ui.box.AssignTreeOrderComponents(...) end

---
--- Assigns layer order components for drawing.
---
---@param registry registry
---@param uiBox Entity
---@return nil
function ui.box.AssignLayerOrderComponents(...) end

---
--- Updates the movement and spring physics for a UI box.
---
---@param registry registry
---@param self Entity
---@param dt number
---@return nil
function ui.box.Move(...) end

---
--- Handles dragging logic for a UI box.
---
---@param registry registry
---@param self Entity
---@param offset Vector2
---@param dt number
---@return nil
function ui.box.Drag(...) end

---
--- Adds a new child element to a UI box or container.
---
---@param registry registry
---@param uiBox Entity
---@param uiElementDef UIElementTemplateNode
---@param parent Entity
---@return nil
function ui.box.AddChild(...) end

---
--- Sets the container for a UI box.
---
---@param registry registry
---@param self Entity
---@param container Entity
---@return nil
function ui.box.SetContainer(...) end

---
--- Returns a string representation of the UI box tree for debugging.
---
---@param registry registry
---@param self Entity
---@param indent? integer
---@return string
function ui.box.DebugPrint(...) end

---
--- Traverses the UI tree from the leaves up to the root, calling the visitor function on each element.
---
---@param registry registry
---@param rootUIElement Entity
---@param visitor fun(entity: Entity)
---@return nil
function ui.box.TraverseUITreeBottomUp(...) end

---
--- Draws all UI boxes in the registry.
---
---@param registry registry
---@param layerPtr Layer
---@return nil
function ui.box.drawAllBoxes(...) end

---
--- Builds a sorted list of all drawable elements within a UI box.
---
---@param registry registry
---@param boxEntity Entity
---@param out_list table
---@return nil
function ui.box.buildUIBoxDrawList(...) end

---
--- Clamps the calculated transform dimensions to the configured minimums.
---
---@param uiConfig UIConfig
---@param calcTransform table
---@return nil
function ui.box.ClampDimensionsToMinimumsIfPresent(...) end

---
--- Initializes a new UI element.
---
---@param registry registry
---@param parent Entity
---@param uiBox Entity
---@param type UITypeEnum
---@param config? UIConfig
---@return Entity
function ui.element.Initialize(...) end

---
--- Applies a scaling factor to all elements in a UI subtree.
---
---@param registry registry
---@param rootEntity Entity
---@param scaling number
---@return nil
function ui.element.ApplyScalingToSubtree(...) end

---
--- Updates the scaling of a UI object and recenters it.
---
---@param uiConfig UIConfig
---@param newScale number
---@param transform Transform
---@return nil
function ui.element.UpdateUIObjectScalingAndRecenter(...) end

---
--- Sets local transform values for a UI element.
---
---@param registry registry
---@param entity Entity
---@param _T table
---@param recalculate boolean
---@return nil
function ui.element.SetValues(...) end

---
--- Returns a string representation of the UI tree for debugging.
---
---@param registry registry
---@param entity Entity
---@param indent integer
---@return string
function ui.element.DebugPrintTree(...) end

---
--- Initializes the visual transform properties (e.g., springs) for an element.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.element.InitializeVisualTransform(...) end

---
--- Applies a 'juice' animation (dynamic motion) to an element.
---
---@param registry registry
---@param entity Entity
---@param amount number
---@param rot_amt number
---@return nil
function ui.element.JuiceUp(...) end

---
--- Checks if the element can be dragged and returns the draggable entity if so.
---
---@param registry registry
---@param entity Entity
---@return Entity|nil
function ui.element.CanBeDragged(...) end

---
--- Sets the width and height of an element based on its content and configuration.
---
---@param registry registry
---@param entity Entity
---@return number, number
function ui.element.SetWH(...) end

---
--- Applies alignment logic to position an element.
---
---@param registry registry
---@param entity Entity
---@param x number
---@param y number
---@return nil
function ui.element.ApplyAlignment(...) end

---
--- Sets all alignments for an element within its UI box.
---
---@param registry registry
---@param entity Entity
---@param uiBoxOffset? Vector2
---@param rootEntity? boolean
---@return nil
function ui.element.SetAlignments(...) end

---
--- Updates the text content and drawable for a text element.
---
---@param registry registry
---@param entity Entity
---@param config UIConfig
---@param state UIState
---@return nil
function ui.element.UpdateText(...) end

---
--- Updates a UI element that represents a game object.
---
---@param registry registry
---@param entity Entity
---@param elementConfig UIConfig
---@param elementNode GameObject
---@param objectConfig UIConfig
---@param objTransform Transform
---@param objectRole InheritedProperties
---@param objectNode GameObject
---@return nil
function ui.element.UpdateObject(...) end

---
--- Draws a single UI element.
---
---@param layerPtr Layer
---@param entity Entity
---@param uiElementComp UIElementComponent
---@param configComp UIConfig
---@param stateComp UIState
---@param nodeComp GameObject
---@param transformComp Transform
---@param zIndex? integer
---@return nil
function ui.element.DrawSelf(...) end

---
--- Performs a full update cycle for a UI element.
---
---@param registry registry
---@param entity Entity
---@param dt number
---@param uiConfig UIConfig
---@param transform Transform
---@param uiElement UIElementComponent
---@param node GameObject
---@return nil
function ui.element.Update(...) end

---
--- Checks if a UI element collides with a given point.
---
---@param registry registry
---@param entity Entity
---@param cursorPosition Vector2
---@return boolean
function ui.element.CollidesWithPoint(...) end

---
--- Gets the ideal position for a cursor when focusing this element.
---
---@param registry registry
---@param entity Entity
---@return Vector2
function ui.element.PutFocusedCursor(...) end

---
--- Removes a UI element and its children.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.element.Remove(...) end

---
--- Triggers a click event on a UI element.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.element.Click(...) end

---
--- Triggers a release event on a UI element.
---
---@param registry registry
---@param entity Entity
---@param objectBeingDragged Entity
---@return nil
function ui.element.Release(...) end

---
--- Applies hover state and effects to a UI element.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.element.ApplyHover(...) end

---
--- Removes hover state and effects from a UI element.
---
---@param registry registry
---@param entity Entity
---@return nil
function ui.element.StopHover(...) end

---
--- Populates a table with a sorted list of UI entities to be drawn.
---
---@param registry registry
---@param root Entity
---@param out_list table
---@return nil
function ui.element.BuildUIDrawList(...) end

---
--- Constructs a raw asset path without a UUID.
---
---@param assetName string # The name of the asset.
---@return string
function util.getRawAssetPathNoUUID(...) end

---
--- Retrieves a pre-defined Color object by its name.
---
---@param colorName string # The name of the color (e.g., "red").
---@return Color
function util.getColor(...) end

---
--- Gets the UUID version of an asset path.
---
---@param path_uuid_or_raw_identifier string # The asset identifier.
---@return string
function util.getAssetPathUUIDVersion(...) end

---
--- Converts a Raylib Color to an ImGui ImVec4.
---
---@param c Color # The Raylib Color object.
---@return ImVec4
function util.raylibColorToImVec(...) end

---
--- Returns a random synonym for the given word.
---
---@param word string # The word to find a synonym for.
---@return string
function util.getRandomSynonymFor(...) end

---
--- Converts a string to its unsigned char representation.
---
---@param value string # The string to convert.
---@return integer
function util.toUnsignedChar(...) end

